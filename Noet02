-- start of EmployeeParRecom/// <reference path="C:\Philip\Projects\EXECPayroll\Execpayroll (Web)\ExecPayroll(Web)\Views/ErrorPage.html" />/// <reference path="C:\Philip\Projects\EXECPayroll\Execpayroll (Web)\ExecPayroll(Web)\Views/Shared/Error.cshtml" />/// <reference path="C:\Philip\Projects\EXECPayroll\Execpayroll (Web)\ExecPayroll(Web)\Views/Shared/Error.cshtml" />/// <reference path="C:\Philip\Projects\EXECPayroll\Execpayroll (Web)\ExecPayroll(Web)\Views/Shared/Error.cshtml" />
var app = angular.module('appEmployee', ['ngRoute', 'ngDialog']);
app.config(function ($routeProvider, $locationProvider) {    $locationProvider.hashPrefix('');    $routeProvider    .when('Employee', {        templateUrl: '/Employee/ShowEmployee',        controller: 'cntrlEmployee'    }).when('Roles', {        templateUrl: '/Roles/FilterView',        controller: 'cntrlRoles'    }).when('Rates', {        templateUrl: '/Rates/FilterView',        controller: 'cntrlRoles'    }).when('Parameter', {        templateUrl: '/Parameters/ListView',        controller: 'cntrlParameters'    })});
app.config(['ngDialogProvider', function (ngDialogProvider) {    ngDialogProvider.setDefaults({        className: 'ngdialog-theme-default',        appendClassName: 'Style',        plain: false        //showClose: true,        //closeByDocument: true,        //closeByEscape: true,        //appendTo: false    });}]);
app.filter('CaseFormat', function () {    return function (x) {        var i, c, txt = "";        for (i = 0; i < x.length; i++) {            c = x[i];            if (i == 1) {                c = c.toUpperCase();            }            txt += c;        }        return txt;    };});
var appTool = angular.module('appTool', []);app.controller('cntrlAppTool', function ($scope) {    var today = new Date();    today.setMonth(today.getMonth() + 6);    $scope.minDate = new Date();    $scope.maxDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    $scope.dateConfig = {        dateFormat: 'MM/DD/YYYY',        minDate: new Date(1900, 1, 1),        maxDate: new Date(today.getFullYear() + 20, today.getMonth(), today.getDate()),        allowFuture: true    }});
app.service('srvcEmployeeDetails', function ($http, $sce, $rootScope, ngDialog) {    var datako = {};    var popID = {};    var PARSubList = {};    var PayrollSubList = {};    var ConfirmValue = {};    //var RecordLoad = false;
    this.EmployeeListOff = true;    this.SetEmployeeListOff = function (value) {        this.EmployeeListOff = value;    }
    this.ShowLoader = function (divID, Message) {        var _scope = $rootScope.$new();        _scope.Message = Message;        popID = ngDialog.open({            template: divID,            plain: false,            showClose: false,            backdrop: 'static',            closeByDocument: false,            scope: _scope,            width: 440        });    }
    this.ShowConfirmMessage = function (divID, Title, Message) {        var _result = {};        var _scope = $rootScope.$new();        _scope.Title = Title;        _scope.Message = $sce.trustAsHtml('<label class="popuplabel" style="padding-left:10px;">' + Message + '</label>');        popID = ngDialog.openConfirm({            template: divID,            plain: false,            showClose: false,            backdrop: 'static',            closeByDocument: false,            cancelButton: true,            scope: _scope,            width: 440        })        return popID;    }        this.ShowMessage = function (divID, Title, Message) {        var _scope = $rootScope.$new();        _scope.Title = Title;        _scope.Message = Message;        popID = ngDialog.open({            template: divID,            plain: false,            showClose: false,            backdrop: 'static',            closeByDocument: false,            scope: _scope,            width: 440        });    }
    this.CloseMessage = function () {        ngDialog.close(popID.id);    }
    this.ShowErrorMessage = function (Title, Message) {        var _scope = $rootScope.$new();        _scope.Title = Title;        _scope.Message = Message;        popID =  ngDialog.open({            template: 'divPopupError',            plain: false,            showClose: false,            backdrop: 'static',            closeByDocument: false,            scope: _scope,            width: 440        });    }
    this.CloseErrorMessage = function () {        ngDialog.close(popID.id);    }
    this.RefreshList = function (EmpNo, key) {        this.GetAllEmployeeList(EmpNo, key).then(function (e) {            $rootScope.$broadcast('RefreshEmployeeList', e);        });    }
    this.GetAllEmployeeList = function () {        return $http({            url: '/Employee/ShowEmployee',            method: "GET",            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }        }).then(function (e) {            datako = e;            return datako;        }).catch(function (error) {            alert(error);        });    }       this.GetEmployeeDetails = function (EmpNo, SearchKeyID) {        return $http({            url: '/Employee/ShowEmployeeInfo',            method: "GET",            params: { 'EmployeeNo': EmpNo, 'SearchKeyID': SearchKeyID },            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }        }).then(function (e) {            datako = e;            return datako;        }).catch(function (error) {            alert(error);        });    }
    this.GetEmployeeList = function (EmpNo, SearchKeyID) {        return $http({            url: '/Employee/ShowEmployeeList',            method: "POST",            params: { 'EmployeeNo': EmpNo, 'SearchKeyID': SearchKeyID },            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }        }).then(function (e) {            datako = e;            return datako;        })    }
    this.SetPARSUBList = function (listItem) { PARSubList = listItem; }    this.GetPARSUBList = function () { return PARSubList; }    this.SetPayrollSUBList = function (listItem) { PayrollSubList = listItem; }    this.GetPayrollSUBList = function () { return PayrollSubList; }    //this.RecordLoaded = function (value) {    //    RecordLoad = value;    //    return RecordLoad;    //}    //var vCurrentModule = "";    //this.SetCurrentModule = function (value) { angular.element('#txtCurrentModule').val(value); }    //this.GetCurrentModule = function () { return vCurrentModule; }
    //var ItemIDList = {};    //this.SetItemIDList = function (IDList) {    //    ItemIDList = IDList;    //}
    // ************************************************** //    // SUCGANG RUEL - BEGIN ( inside the app.service('srvcEmployeeDetails'    // ************************************************** //    this.ShowImportMessageResult = function (divID, Title, Message, ImportProcessResultModel) {        var _scope = $rootScope.$new();        _scope.Title = Title;        _scope.Message = Message;        _scope.ImportUserID = ImportProcessResultModel.ImportUserID;        _scope.TotalImportExcelRecords = ImportProcessResultModel.TotalImportExcelRecords;        _scope.TotalProcessed = ImportProcessResultModel.TotalProcessed;        _scope.Accepted = ImportProcessResultModel.Accepted;        _scope.Excluded = ImportProcessResultModel.Excluded;        _scope.Invalid = ImportProcessResultModel.Invalid;        _scope.TotalNotProcessed = ImportProcessResultModel.TotalNotProcessed;        popID = ngDialog.open({            template: divID,            plain: false,            showClose: false,            backdrop: 'static',            closeByDocument: false,            scope: _scope,            width: 440        });    }    // ************************************************** //    // SUCGANG RUEL - END ( inside the app.service('srvcEmployeeDetails'    // ************************************************** //
});
app.controller('cntrlEmployee', function ($scope, $http, $sce, $rootScope, $window, $timeout, ngDialog, srvcEmployeeDetails) {    var _UserID = '';    $scope.Session = '';    $scope.UserID = '';    $scope.ItemID = "";    $scope.CanRead = false;    $scope.CanWrite = false;    $scope.CanDelete = false;    $scope.CanPrint = false;
        $scope.SetCurrentModule = function (ModuleName) {        $scope.CurrentModule = ModuleName;    }
    var ItemIDList = {};    $scope.SetItemIDList = function (IDList) {        ItemIDList = IDList;    }
    $scope.ReadEnabled = function (ItemID) {        var bAllowed = false;        if (ItemIDList != null) {            if (ItemIDList.length > 0) {                for (var i = 0; i < ItemIDList.length; i++) {                    if (ItemIDList[i].ItemID == ItemID) {                        if (ItemIDList[i].CanRead == 1)                            bAllowed = true;                    }                }            }        }        return bAllowed;    }
    $scope.WriteEnabled = function (ItemID) {        var bAllowed = false;        if (ItemIDList != null) {            if (ItemIDList.length > 0) {                for (var i = 0; i < ItemIDList.length; i++) {                    if (ItemIDList[i].ItemID == ItemID) {                        if (ItemIDList[i].CanWrite == 1)                            bAllowed = true;                    }                }            }        }        return bAllowed;    }
    $scope.RecordLoad = false;    $scope.GetSession = function () {        $scope.PopulateEmployeeList();        $http.get('/Employee/ReadConnectionString').then(function (e) {            alert("Connection: " + e.data);        })                /*        $http.get('/Employee/GetSession').then(function (e) {            $scope.Session = e.data;            $scope.UserID = e.data.UserID;            $scope.UserLevel = e.data.UserLevel;            $rootScope.$broadcast('GetUserLevel', e.data);            if (e.data.AccessRights != null) {                $scope.AccessRights = e.data.AccessRights;                $scope.SetItemIDList($scope.AccessRights);            }            else            {                alert("No Access Rights - " + e.data.AccessRights);            }            
            //if ($scope.AccessRights.length > 0) {            //    $scope.ItemID = $scope.AccessRights[0].ItemID;            //    if ($scope.AccessRights[0].CanRead == 1) {            //        $scope.CanRead = true;            //    } else {            //        $scope.CanRead = false;            //    }            //    if ($scope.AccessRights[0].CanWrite == 1) {            //        $scope.CanWrite = true;            //    } else {            //        $scope.CanWrite = false;            //    }            //    if ($scope.AccessRights[0].CanDelete == 1) {            //        $scope.CanDelete = true;            //    } else {            //        $scope.CanDelete = false;            //    }            //    if ($scope.AccessRights[0].CanPrint == 1) {            //        $scope.CanPrint = true;            //    } else {            //        $scope.CanPrint = false;            //    }            //}            
            _UserID = $scope.UserID;            if (_UserID == null) {                $window.location.href = 'ErrorPage.html';            } else {                $scope.EmployeeName = e.data.EmployeeName;                $scope.Rank = e.data.Rank;                $scope.RecordLoaded(false);                $scope.PopulateEmployeeList();            }        }).catch(function (error) {            console.log(error);            alert("ErrorX: " + error.data);        })        */    }        $scope.RecordLoaded = function (value) {        $scope.RecordLoad = value;    }
    //srvcEmployeeDetails.ShowLoader('divPopupLoader', 'Please wait while loading records...');    $scope.EmployeeList = [];    //if ($scope.UserID != '') {    $scope.PopulateEmployeeList = function () {        //srvcEmployeeDetails.ShowLoader('divPopupLoader', 'Please wait while loading records...');        //$timeout(function () { srvcEmployeeDetails.CloseMessage(); }, 1000).then(function () {        //    $timeout(function () {                $http.get('/Employee/ShowEmployee').then(function (e) {                    $scope.EmployeeList = [];                    for (var i = 0; i < e.data.length; i++) {                        $scope.EmployeeList.push(e.data[i]);                    }                    $scope.PageNo = e.data[0].PageNo;                    $scope.PageSize = e.data[0].PageSize;                    $scope.TotalRecord = e.data.length;                    //$scope.RecordLoaded(true);                    $scope.getEmpNo(e.data[0].EmpNo, 1);                    //$timeout(function () {                    //    srvcEmployeeDetails.CloseMessage();                    //}, 1000);                }).catch(function (error) {                    if (error.status = 500) {                        console.log(error);                        return;                    }                })        //    });        //});            }    
    $rootScope.$on('RefreshEmployeeList', function (event, args) {        $scope.EmployeeList = [];        for (var i = 0; i < args.data.length; i++) {            $scope.EmployeeList.push(args.data[i]);        }        //$scope.PageNo = args.data[0].PageNo;        //$scope.PageSize = args.data[0].PageSize;        //$scope.TotalRecord = args.data.length;    });
    $scope.selectedRow = 0;    $scope.rowHighilited = function (row) {        $scope.selectedRow = row;    }
    $scope.info = true;    $scope.reco = false;    $scope.memo = false;    $scope.bonus = false;    $scope.leaves = false;    $scope.premium = false;    $scope.filters = false;
    $scope.showInfo = function () {        $scope.info = true;        $scope.reco = false;        $scope.memo = false;        $scope.bonus = false;        $scope.leaves = false;        $scope.premium = false;        $scope.filters = false;    };
    $scope.showReco = function () {        $scope.info = false;        $scope.reco = true;        $scope.memo = false;        $scope.leaves = false;        $scope.bonus = false;        $scope.premium = false;        $scope.filters = false;    };
    $scope.showMemo = function () {        $scope.info = false;        $scope.reco = false;        $scope.memo = true;        $scope.leaves = false;        $scope.bonus = false;        $scope.premium = false;        $scope.filters = false;    };
    $scope.showBonus = function () {        $scope.info = false;        $scope.reco = false;        $scope.memo = false;        $scope.leaves = false;        $scope.bonus = true;        $scope.premium = false;        $scope.filters = false;    };
    $scope.showLeaves = function () {        $scope.info = false;        $scope.reco = false;        $scope.memo = false;        $scope.bonus = false;        $scope.leaves = true;        $scope.premium = false;        $scope.filters = false;    };
    $scope.showPremium = function () {        $scope.info = false;        $scope.reco = false;        $scope.memo = false;        $scope.leaves = false;        $scope.bonus = false;        $scope.premium = true;        $scope.filters = false;    };
    $scope.showFilters = function () {        $scope.info = false;        $scope.reco = false;        $scope.memo = false;        $scope.bonus = false;        $scope.leaves = false;        $scope.premium = false;        $scope.filters = true;    };
    $scope.searchPopup = false;    $scope.ShowSearchPopup = function (result) {        if (result == 'true') {            $scope.searchPopup = true;        } else {            $scope.searchPopup = false;        }    };    $scope.searchpopupTitle = "";    $scope.showSearchPopupTitle = function (val) {        $scope.searchpopupTitle = val;    };
    $scope.SearchKeys = [{ value: '<SELECT>', key: 0 }, { value: 'EMPLOYEE NO', key: 1 }, { value: 'SGV NO', key: 4 }, { value: 'FIRST NAME', key: 3 }, { value: 'LAST NAME', key: 2 }];    $scope.SelectedKey = $scope.SearchKeys[0];
    $scope.EmployeeNo = [];    $scope.SearchKey = [];
    /*    $scope.getEmpNo = function (SearchHint, SearchKeyID) {        //switch (SearchKeyID) {        //    case 0: break;        //    case 1: $scope.employeenumber = SearchHint; break;        //    case 2: break;        //    case 3: break;        //    case 4: $scope.employeesgvno = SearchHint; break;        //}        if (srvcEmployeeDetails.EmployeeListOff == true) {            $scope.EmployeeNo = SearchHint;            $scope.SearchKey = SearchKeyID            srvcEmployeeDetails.ShowLoader('divPopupLoader', 'Please wait while loading records...');            $timeout(function () { srvcEmployeeDetails.CloseMessage(); }, 1000).then(function () {                $timeout(function () {                    srvcEmployeeDetails.GetEmployeeDetails(SearchHint, SearchKeyID).then(function (e) {                        //srvcEmployeeDetails.CloseMessage();                        $rootScope.$broadcast('GetEmployeeInfo', e.data);                        $rootScope.$broadcast('GetEmployeeBonus', e.data);                        //$scope.RecordLoaded(true);                        //$scope.CurrentModule = srvcEmployeeDetails.GetCurrentModule();                        angular.element('.date-picker').datepicker('disable');                        //angular.element('#tblEmployeeList').attr('disabled', 'disabled');
                        $scope.RecordLoad = true;                        srvcEmployeeDetails.CloseMessage();                    });                });            });        }            };    */    $scope.getEmpNo = function (SearchHint, SearchKeyID) {        //switch (SearchKeyID) {        //    case 0: break;        //    case 1: $scope.employeenumber = SearchHint; break;        //    case 2: break;        //    case 3: break;        //    case 4: $scope.employeesgvno = SearchHint; break;        //}        $scope.EmployeeNo = SearchHint;        $scope.SearchKey = SearchKeyID        //srvcEmployeeDetails.ShowLoader('divPopupLoader', 'Please wait while loading records...');        srvcEmployeeDetails.GetEmployeeDetails(SearchHint, SearchKeyID).then(function (e) {            //srvcEmployeeDetails.CloseMessage();            $rootScope.$broadcast('GetEmployeeInfo', e.data);            $rootScope.$broadcast('GetEmployeeBonus', e.data);        });    };
    });
var appInfo = angular.module('appInfo', []);appInfo.controller('cntrlInformation', function ($scope, $http, $rootScope, srvcEmployeeDetails) {
    //ral20170823    $scope.RankLabel = 'Rank:';    $rootScope.$on('GetNewRank', function (event, args) {        angular.forEach($scope.RankList, function (val, key) {            if (val.Key == args) {                $scope.SelRank = val;                //$rootScope.$broadcast('GetRankFromInfoTab', $scope.SelRank.Key);                if ($scope.RankLabel.toLowerCase() == 'new rank:')                    $scope.RankLabel = 'Rank:';                else                    $scope.RankLabel = 'New Rank:';            }        });    })
    $scope.onRankChange = function () {        $rootScope.$broadcast('GetRankFromInfoTab', $scope.SelRank.Key);    }    //
    $scope.EmployeeNo = "";    $scope.LastName = "";    $scope.FirstName = "";    $scope.MiddleName = "";    $scope.SGVNo = "";    $scope.NoOfMonths = "0";    $scope.NoOfDays = "0";
    $scope.RankList = [];    $scope.tmpSelRank = { operator: 0 };    $scope.SelRank = { operator: 0 };    $http({        url: '/Employee/GetRankList',        method: "GET"    }).then(function (result) {        $scope.RankList = result.data;        $scope.SelRank = result.data[0];        $scope.tmpSelRank = result.data[0];    })        $scope.PARSubList = [];    $scope.SelPARSub = { operator: 0 };    $scope.tmpSelPARSub = { operator: 0 };    $http({        url: '/Employee/GetPARSubList',        method: "GET"    }).then(function (result) {        $scope.PARSubList = result.data;        $scope.SelPARSub = result.data[0];        $scope.tmpSelPARSub = result.data[0];        srvcEmployeeDetails.SetPARSUBList($scope.SelPARSub);    })    $scope.SelectPARSub = function (SelectedPARSub) {        srvcEmployeeDetails.SetPARSUBList(SelectedPARSub);    }
    $scope.PayrollSubList = [];    $scope.SelPayrollSub = { operator: 0 };    $scope.tmpSelPayrollSub = { operator: 0 };    $http({        url: '/Employee/GetPayrollSubList',        method: "GET"    }).then(function (result) {        $scope.PayrollSubList = result.data;        $scope.SelPayrollSub = result.data[0];        $scope.tmpSelPayrollSub = result.data[0];        srvcEmployeeDetails.SetPayrollSUBList($scope.SelPayrollSub);    })    $scope.SelectPayrollSub = function (SelectedPayrollSub) {        srvcEmployeeDetails.SetPayrollSUBList(SelectedPayrollSub);    }    
    //$scope.EmployeeRecord = [];    //$scope.SaveRecord = function () {    //    //$scope.LastName = document.getElementById("txtLastName").value;    //    $scope.LastName = angular.element('#txtLastName').val();    //    alert($scope.LastName);    //};
    $rootScope.$on('GetEmployeeInfo', function (event, args) {        //$scope.EmployeeRecord = args.Info;
        $scope.EmployeeNo = args.Info.EmpNo;        //----        $scope.SGVNo = args.Info.SGVNo;        $scope.LastName = args.Info.LastName;        $scope.FirstName = args.Info.FirstName;        $scope.MiddleName = args.Info.MiddleName;        $scope.DateHired = args.Info.DateHired;        $scope.DateResigned = args.Info.DateResigned;        $scope.Position = args.Info.Position;
        $scope.SelRank = $scope.tmpSelRank;        angular.forEach($scope.RankList, function (val, key) {            if (val.Key == $scope.Position)                $scope.SelRank = val;        });
        $scope.Unit = args.Info.Unit;        $scope.SelPARSub = $scope.tmpSelPARSub        $scope.Institution = args.Info.Institution;        $scope.InstitutionDesc = args.Info.InstitutionDesc;        angular.forEach($scope.PARSubList, function (val, key) {            if (val.Key == $scope.Institution) {                $scope.SelPARSub = val;                srvcEmployeeDetails.SetPARSUBList($scope.SelPARSub);            }        });
        $scope.Unit2 = args.Info.Unit2;        $scope.SubUnit = args.Info.SubUnit;        $scope.Institution2 = args.Info.Institution2;        $scope.Institution2Desc = args.Info.Institution2Desc        $scope.SelPayrollSub = $scope.tmpSelPayrollSub;        angular.forEach($scope.PayrollSubList, function (val, key) {            if (val.Key == $scope.Institution2)                $scope.SelPayrollSub = val;                srvcEmployeeDetails.SetPayrollSUBList($scope.SelPayrollSub);        });        if (args.Info.TagVP == '1') { $scope.TagVP = true }        else { $scope.TagVP = false }
        $scope.TagVPDate = args.Info.TagVPDate;        //$scope.EmployeeNo = args.Bonus.EmpNo;        //$scope.NoOfMonths = args.Bonus.NoOfMonths;        //$scope.NoOfDays = args.Bonus.NoOfDays;        //$scope.CutInLenMonth = args.Bonus.CutInLenMonth;        //$scope.CutInLenDays = args.Bonus.CutInLenDays;        //$scope.ResultGross = args.Bonus.ResultGross;        //$scope.ResultBasic = args.Bonus.ResultBasic;        //$scope.ResultRRA = args.Bonus.ResultRRA;        //$scope.ResultTA = args.Bonus.ResultTA;        //$scope.BonusGross = args.Bonus.BonusGross;        //$scope.BonusBasic = args.Bonus.BonusBasic;        //$scope.BonusRRA = args.Bonus.BonusRRA;        //$scope.BonusTA = args.Bonus.BonusTA;        //$scope.CCardAmount = args.Bonus.CCardAmount;
        $rootScope.$broadcast('GetEmployeeBonus', args);        //$scope.CorpCard = args.Bonus.CorpCard;        //$scope.ForceCCard = args.Bonus.ForceCCard;        //$scope.ForceBasic = args.Bonus.ForceBasic;
        $scope.Memo = [];        $scope.Recom = [];        $scope.CurSalary = [];        $scope.NewSalary = [];        $scope.Increase = [];        $scope.Leaves = [];        $scope.Premium = [];
        $scope.Memo = args.MemoOnly;        $scope.Recom = args.Recommendation;        $scope.CurSalary = args.CurrentSalary;        $scope.NewSalary = args.NewSalary;        $scope.Increase = args.Increase;        $scope.Leaves = args.Leaves;        $scope.Premium = args.Premium;
        $scope.RankLabel = args.Info.NewPosition == '' ? 'Rank:' : 'New Rank:';
        $rootScope.$broadcast('GetEmployeeRecom', { Recommendation: $scope.Recom, CurSalary: $scope.CurSalary, NewSalary: $scope.NewSalary, Increase: $scope.Increase, Empno: $scope.EmployeeNo, Pos: $scope.Position, NewPos: args.Info.NewPosition });        $rootScope.$broadcast('GetEmployeeMemo', { Empno: $scope.EmployeeNo, Memo: $scope.Memo, CurPacnt: $scope.CurSalary.CurPacnt, NewPacnt: $scope.NewSalary.NewPacnt, Pos: $scope.Position, NewPos: args.Info.NewPosition, Recommendation: $scope.Recom });
        $rootScope.$broadcast('GetEmployeeLeave', $scope.Leaves);        $rootScope.$broadcast('GetEmployeePremium', $scope.Premium);        //----
        //$http({        //    url: '/Employee/ShowEmployeeInfo',        //    method: "GET",        //    params: { 'EmployeeNo': $scope.EmployeeNo }        //}).then(function (e) {                    //}).catch(function (error) {        //    console.log(error);        //})    });  });
var appBonus = angular.module('appBonus', []);appBonus.controller('cntrlBonus', function ($scope, $http, $rootScope, ngDialog, srvcEmployeeDetails, $timeout) {
    $scope.EmployeeNo = "";    $scope.NoOfMonths = "0.00";    $scope.NoOfDays = "0.00";    $scope.CutInLenMonth = "0.00";    $scope.CutInLenDays = "0.00";    $scope.ResultGross = "0.00";    $scope.ResultBasic = "0.00";    $scope.ResultRRA = "0.00";    $scope.ResultTA = "0.00";    $scope.BonusGross = "0.00";    $scope.BonusBasic = "0.00";    $scope.BonusRRA = "0.00";    $scope.BonusTA = "0.00";    $scope.CCardAmount = "0.00";    $scope.CorpCard = "0";    $scope.ForceCCard = "0";    $scope.ForceBasic = "0";    $scope.CuttOffType = "";
    $scope.args = {};    $rootScope.$on('GetEmployeeBonus', function (event, args) {        //$scope.Bonusargs = args;        $scope.EmployeeNo = args.Bonus.EmpNo;        $scope.NoOfMonths = args.Bonus.NoOfMonths;        $scope.NoOfDays = args.Bonus.NoOfDays;        $scope.CutInLenMonth = args.Bonus.CutInLenMonth;        $scope.CutInLenDays = args.Bonus.CutInLenDays;        $scope.ResultGross = args.Bonus.ResultGross;        $scope.ResultBasic = args.Bonus.ResultBasic;        $scope.ResultRRA = args.Bonus.ResultRRA;        $scope.ResultTA = args.Bonus.ResultTA;        $scope.BonusGross = args.Bonus.BonusGross;        $scope.BonusBasic = args.Bonus.BonusBasic;        $scope.BonusRRA = args.Bonus.BonusRRA;        $scope.BonusTA = args.Bonus.BonusTA;        $scope.CCardAmount = args.Bonus.CCardAmount;
        if (args.Bonus.CorpCard == 1)            $scope.CorpCard = true;        else            $scope.CorpCard = false;
        if (args.Bonus.ForceCCard == 1)            $scope.ForceCCard = true;        else            $scope.ForceCCard = false
        if (args.Bonus.ForceBasic == 1)            $scope.ForceBasic = true;        else            $scope.ForceBasic = false;
        if(args.Info.CutoffType != '')            $scope.CutOffType = args.Info.CutoffType + ' BONUS';        else            $scope.CutOffType = 'NO BONUS TYPE';
    });
    $scope.editenable = false;    $scope.editenabled = function (val) {        if (val == "true") {            $scope.editenable = false;            $scope.cancelenable = true;            $scope.saveenable = true;        } else {            $scope.editenable = true;            $scope.cancelenable = false;            $scope.saveenable = false;        }    }
    $scope.cancelenable = true;    $scope.cancelenabled = function (val) {        if(val == "true") {            $scope.cancelenable = false;            $scope.editenable = true;            $scope.saveenable = false;        } else {            $scope.cancelenable = true;            $scope.editenable = false;            $scope.saveenable = true;        }    }
    $scope.saveenable = true;    $scope.saveenabled = function (val) {        if (val == "true") {            $scope.saveenable = false;            $scope.cancelenable = false;            $scope.editenable = true;        } else {            $scope.saveenable = true;            $scope.cancelenable = true;            $scope.editenable = false;        }    }
    $scope.disable = true;    $scope.disabled = function (val) {        if (val == "true") {            $scope.disable = false;        }else{            $scope.disable = true;        }    }
        $scope.SaveBonus = function () {        var structBonus = {            EmpNo: $scope.EmployeeNo,            ResultGross: $scope.ResultGross,            ResultBasic: $scope.ResultBasic,            ResultRRA: $scope.ResultRRA,            ResultTA: $scope.ResultTA,            BonusGross: $scope.BonusGross,            BonusBasic: $scope.BonusBasic,            BonusRRA: $scope.BonusRRA,            BonusTA: $scope.BonusTA,            CCardAmount: $scope.CCardAmount,            CorpCard: $scope.CorpCard,            ForceCCard: $scope.ForceCCard,            ForceBasic: $scope.ForceBasic        };        $http({            url: '/Employee/UpdateEmployeeBonus',            method: "POST",            data: $.param(structBonus),            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }        }).then(function (result) {            srvcEmployeeDetails.ShowMessage("divPopupResult", "Save Record", "Record Saved Successfully.");        }).catch(function (error) {            alert(error);        })    }
    var popId = {};    $scope.popupProcessBonus = function () {        srvcEmployeeDetails.ShowLoader('divPopupLoader', 'Please wait while processing bonus...')        $scope.processBonus($scope.EmployeeNo);    };
    $scope.ResultMessage = "";    $scope.processBonus = function (EmpNo) {        $http({            url: '/Employee/ProcessBonus',            method: "GET",            params: { 'EmployeeNo': EmpNo },            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }        }).then(function (result) {            $scope.ResultMessage = result.data.Message;            $timeout(function () {                srvcEmployeeDetails.CloseMessage();            }, 1000).then(function () {                $timeout(function () {                    srvcEmployeeDetails.ShowMessage("divPopupResult", "Process Bonus", $scope.ResultMessage)                });            });        }).catch(function (error) {            alert(error);        })    }
    $scope.CloseMessage = function(){        ngDialog.close(popId);    }
});
var MainApp = angular.module("appMain", ["ngDialog", "ngFlatDatepicker", "appEmployee", "appInfo", "appBonus", "appLeave", "appPremium", "appMemo", "appRecom", "appFilter", "appPosition", "appParameters", "appProcess", "appRoles", "appReports"])
MainApp.controller('cntrlCurentModule', function ($scope) {    //$scope.CurrentModule = "";    $scope.SetCurrentModule = function (ModuleName) {        $scope.CurrentModule = ModuleName;    }});
MainApp.controller('cntrlDateTime', function ($scope, $interval) {    var tick = function () {        $scope.clock = Date.now();    }    tick();    $interval(tick, 1000);});
MainApp.directive('currencyFmt', function () {    return {        require: 'ngModel',        link: function (scope, element, attrs, ngModel) {
            ngModel.$parsers.push(function (viewValue) {                return parseFloat(viewValue.replace(",", "")); //.toFixed(2); //2222;            });
            ngModel.$formatters.push(function (modelValue) {                //return modelValue.toFixed(2);                 var newValue = '0.00';                if (modelValue != undefined) {                    newValue = parseFloat(modelValue);                    var intValue = newValue.toFixed(2).split('.')[0];                    var decValue = newValue.toFixed(2).split('.')[1];                    newValue = String(intValue).replace(/(.)(?=(\d{3})+$)/g, '$1,') + '.' + decValue;                }                return newValue;            });
        }    };});
MainApp.directive('jqDatepicker', function () {    return {        restrict: 'A',        link: function (scope, element, attrs, controller) {            element.datepicker({                onSelect: function (dt) {                    scope.$apply(function () {                        controller.$setViewValue(dt);                    });                },                changeMonth: true,                changeYear: true,                dateFormat: "mm/dd/yy",                showOn: "button",                buttonImage: "/images/calendar.gif",                buttonImageOnly: true,                buttonText: "Select date"            });        }    }})
MainApp.directive('reformatOnBlur', function () {    return {        require: 'ngModel',        restrict: 'A',        link: function (scope, elm, attrs, ctrl) {            elm.bind('blur', function () {                var viewValue = ctrl.$modelValue;                for (var i in ctrl.$formatters) {                    viewValue = ctrl.$formatters[i](viewValue);                }                ctrl.$viewValue = viewValue;                ctrl.$render();            });        }    };});
MainApp.controller('cntrlTab', ['$scope', function ($scope) {    $scope.tab = 1;    $scope.setTab = function (newTab) {        $scope.tab = newTab;    };
    $scope.isSet = function (tabNum) {        return $scope.tab === tabNum;    };}]);
MainApp.controller('Saving', function ($scope, $sce, $http, $timeout, ngDialog, srvcEmployeeDetails) {
    //type: 0=NumericOnly; 1=AlphaOnly; 2=AlphaNumericOnly; 3=Date; 5=Dropdown(non-zero numeric)    //isRequire: 0=true; 1=false; -4=Invalid Required Value    //Return Value: -1=String Required; -2=String Required; 0=Numeric Default; -3=Invalid type; -5=Invalid Date; -6=Invalid dropdown selection(Zero)    $scope.Validation = function (val, isRequire, type) {        if (isRequire == true) {            if ((type == 0) && (val == '')) { return 0; }            else if ((type == 0) && (val != '')) { return val; }            else if ((type == 1) && (val == '')) { return -1; }            else if ((type == 2) && (val == '')) { return -2; }            else if (((type == 1) || (type == 2)) && (val != '')) { return val; }            else if ((type == 3) && (val != '')) {                var m = moment(val);                if (m._isValid == false) { return -5; }                else { return val; }            }            else if ((type == 5) && (val == 0)) {                return -6;            }            else return -3;        } else {            if ((type == 0) && (val == '')) { return 0; }            else if ((type == 1) && (val == '')) { return ''; }            else if ((type == 2) && (val == '')) { return ''; }        }        if ((isRequire != true) && (isRequire != false)){ return -4; }    }
    $scope.Error = [];    $scope.ErrorMessage = function (msg) {        $scope.Error = $sce.trustAsHtml($scope.Error + '<label class="popuplabel" style="padding-left:10px;">' + msg + '</label><br />');    }
    $scope.ValidateInfoField = function (fieldName, id, isRequire, type) {        var val; var _isRequire; var _type; var Result;        val = angular.element(id).val();        _isRequire = isRequire;        _type = type;        Result = $scope.Validation(val, _isRequire, _type);                if (Result == 0) { angular.element(id).val(0); }        else if (Result == '') { angular.element(id).val(''); }        else {                        if (Result == -1 || Result == -2) { $scope.ErrorMessage(fieldName + ' field is required.'); }            if (Result == -3) { $scope.ErrorMessage('Invalid type specified in ' + fieldName + ' field.'); }            if (Result == -5) { $scope.ErrorMessage('Invalid date specified in ' + fieldName + ' field.'); }            if (Result == -6) { $scope.ErrorMessage('Invalid selection in ' + fieldName + ' field.'); }        }    }
    //$scope.Confirm = function () {    //    srvcEmployeeDetails.ShowConfirmMessage('divPopupConfirm', 'Confirmation', 'test').then(function (val) {    //        alert('yes');    //    }, function (err) {    //        alert('no');    //    })    //    //$scope.Trigger();    //}
    $scope.SaveRecord = function () {        //Information        $scope.Error = '';        $scope.ValidateInfoField('SGV No.', '#txtSGVNo', true, 0);        $scope.ValidateInfoField('Last Name', '#txtLastName', true, 1);        $scope.ValidateInfoField('First Name', '#txtFirstName', true, 1);        $scope.ValidateInfoField('Middle Name', '#txtMiddleName', true, 1);        $scope.ValidateInfoField('Date Hired', '#txtDateHired', true, 3);        $scope.ValidateInfoField('Date Resigned', '#txtDateResigned', false, 3);
        $scope.ValidateInfoField('Current Rule', '#txtCurRule', false, 1);        $scope.ValidateInfoField('New Rule', '#txtNewRule', false, 1);
        $scope.ValidateInfoField('Current PA', '#txtCurPa', false, 0);        $scope.ValidateInfoField('Salary Ranking', '#txtBELLPOSDESC', false, 1);        $scope.ValidateInfoField('Rank', '#txtRank', false, 1);
        if ($scope.Error != '') {            srvcEmployeeDetails.ShowErrorMessage("Error Message", $scope.Error);        }        else {            $scope.UserID = angular.element('#txtUserID').val();            $scope.UserLevel = angular.element('#txtUserLevel').val();            $scope.EmployeeNo = angular.element('#txtEmployeeNo').val();            $scope.SGVNo = angular.element('#txtSGVNo').val();            $scope.LastName = angular.element('#txtLastName').val();            $scope.FirstName = angular.element('#txtFirstName').val();            $scope.MiddleName = angular.element('#txtMiddleName').val();            $scope.DateHired = angular.element('#txtDateHired').val();            $scope.DateResigned = angular.element('#txtDateResigned').val();
            var _pos;            _pos = angular.element('#selRank').find('option');            angular.forEach(_pos, function (v, k) {                if (angular.element(v).prop('selected')) {                    $scope.Position = angular.element(v).text().split('|')[0].trim();                }            });                        $scope.PARSubsidiaryKey = srvcEmployeeDetails.GetPARSUBList().Key;            $scope.PayrollSubsidiaryKey = srvcEmployeeDetails.GetPayrollSUBList().Key;            $scope.PARUnit = angular.element('#txtPARUnit').val();            $scope.PARSubUnit = angular.element('#txtPARSubUnit').val();            if (angular.element('#txtTagVP').prop('checked') == true) { $scope.TagVP = '1'; } else { $scope.TagVP = '0'; }            $scope.TagVPDate = angular.element('#txtTagVPDate').val();
            //Bonus            $scope.NoOfMonths = angular.element('#txtNoOfMonths').val();            $scope.NoOfDays = angular.element('#txtNoOfDays').val();            $scope.CutInLenMonth = angular.element('#txtCutLenInMonths').val();            $scope.CutInLenDays = angular.element('#txtCutLenInDays').val();
            //Leaves            $scope.NEWGROSS = angular.element('#txtLeavesNEWGROSS').val().replace(/,/g, '');            $scope.NONT_VL = angular.element('#txtLeavesNONT_VL').val();            $scope.NONT_AMT = angular.element('#txtLeavesNONT_AMT').val();            $scope.TAXB_VL = angular.element('#txtLeavesTAXB_VL').val();            $scope.TAXB_SL = angular.element('#txtLeavesTAXB_SL').val();            $scope.VLSL_TX = angular.element('#txtLeavesVLSL_TX').val();            $scope.TAXB_AMT = angular.element('#txtLeavesTAXB_AMT').val().replace(/,/g, '');
            //Recom            $scope.LastPromoDate = angular.element('#txtLastPromoDate').val();            $scope.EvaluationDate = angular.element('#txtEvaluationDate').val();
            var _posLMOVENAT;            _posLMOVENAT = angular.element('#ddlLMovenat').find('option');            angular.forEach(_posLMOVENAT, function (v, k) {                if (angular.element(v).prop('selected')) {                    $scope.LMOVENAT = angular.element(v).val().split(':')[1];                }            });
            $scope.PAR_C = angular.element('#txtPAR_C').val();            $scope.PAR_N = angular.element('#txtPAR_N').val();            $scope.BAREA = angular.element('#txtBAREA').val();
            var _posBELLAREA;            _posBELLAREA = angular.element('#ddlBellArea').find('option');            angular.forEach(_posBELLAREA, function (v, k) {                if (angular.element(v).prop('selected')) {                    $scope.BELLAREA = angular.element(v).val().split(':')[1];                }            });
            $scope.BELLPOSDESC = angular.element('#txtBELLPOSDESC').val();
            if (angular.element('#chkTagProlonged').prop('checked') == true) { $scope.TagProlonged = true; } else { $scope.TagProlonged = false; }            if (angular.element('#chkTagException').prop('checked') == true) { $scope.TagException = true; } else { $scope.TagException = false; }            $scope.Recomd = angular.element('#ddlRecomd').val().split(':')[1];            $scope.Rank = angular.element('#txtRank').val();
            $scope.CurrentRule = angular.element('#txtCurRule').val();            $scope.CurrentGross = angular.element('#txtCurGross').val().replace(/,/g, '');            $scope.CurrentBasic = angular.element('#txtCurBasic').val().replace(/,/g, '');            $scope.CurrentRA = angular.element('#txtCurRep').val().replace(/,/g, '');            $scope.CurrentTA = angular.element('#txtCurTrav').val().replace(/,/g, '');            $scope.CurrentCard = angular.element('#txtCurDiamt').val().replace(/,/g, '');            $scope.CurrentPA = angular.element('#txtCurPa').val().replace(/,/g, '');            $scope.CurrentPACnt = angular.element('#txtCurPaCnt').val();            if (angular.element('#chkCurDitag').prop('checked') == true) { $scope.CurrentCardTag = true; } else { $scope.CurrentCardTag = false; }            $scope.CurrentCreditRatio = angular.element('#txtCurCreditRatio').val()            if (angular.element('#chkCurDiforce').prop('checked') == true) { $scope.CurrentForceCC = true; } else { $scope.CurrentForceCC = false; }            if (angular.element('#chkCurAlteredBasic').prop('checked') == true) { $scope.CurrentForceBasic = true; } else { $scope.CurrentForceBasic = false; }
            $scope.IncreaseCurPercent = angular.element('#txtCurPct').val();            $scope.IncreaseCurConfirm = angular.element('#txtCurConfAmt').val().replace(/,/g, '');            $scope.IncreaseCurAmount = angular.element('#txtCurIncAmount').val().replace(/,/g, '');
            $scope.IncreaseNewPercent = angular.element('#txtNewIncPct').val();            $scope.IncreaseNewConfirm = angular.element('#txtNewIncConfAmt').val().replace(/,/g, '');            $scope.IncreaseNewAmount = angular.element('#txtCurGross').val().replace(/,/g, '');
            if (angular.element('#chkIsProrated').prop('checked') == true) { $scope.IncreaseIsProrated = true; } else { $scope.IncreaseIsProrated = false; }            if (angular.element('#chkTagAdvance').prop('checked') == true) { $scope.IncreaseMemoOnly = true; } else { $scope.IncreaseMemoOnly = false; }
            $scope.NewRule = angular.element('#txtNewRule').val();            $scope.NewGross = angular.element('#txtNewGross').val().replace(/,/g, '');            $scope.NewBasic = angular.element('#txtNewBasic').val().replace(/,/g, '');            $scope.NewRA = angular.element('#txtNewRep').val().replace(/,/g, '');            $scope.NewTA = angular.element('#txtNewTrav').val().replace(/,/g, '');            $scope.NewPA = angular.element('#txtNewPa').val().replace(/,/g, '');            $scope.NewPACnt = angular.element('#txtNewPaCnt').val();            $scope.NewCard = angular.element('#txtNewDiamt').val().replace(/,/g, '');            if (angular.element('#chkNewDitag').prop('checked') == true) { $scope.NewCardTag = true; } else { $scope.NewCardTag = false; }                        $scope.NewCreditRatio = angular.element('#txtNewCreditRatio').val();            if (angular.element('#chkNewDiforce').prop('checked') == true) { $scope.NewForceCC = true; } else { $scope.NewForceCC = false; }            if (angular.element('#chkNewAlteredBasic').prop('checked') == true) { $scope.NewForceBasic = true; } else { $scope.NewForceBasic = false; }            if (angular.element('#chkTagProlonged').prop('checked') == true) { $scope.IsProlongLeave = true; } else { $scope.IsProlongLeave = false; }            if (angular.element('#chkTagException').prop('checked') == true) { $scope.IsException = true; } else { $scope.IsException = false; }                        //Memo            $scope.MemoOrder = angular.element('#txtOrder1').val();            $scope.NameOrder = angular.element('#txtOrder3').val();
            $scope.MOCurGross = angular.element('#txtMOCurGross').val().replace(/,/g, '');            $scope.MOCurBasic = angular.element('#txtMOCurBasic').val().replace(/,/g, '');            $scope.MOCurRep = angular.element('#txtMOCurRep').val().replace(/,/g, '');            $scope.MOCurTrav = angular.element('#txtMOCurTrav').val().replace(/,/g, '');            $scope.MOCurPA = angular.element('#txtMOCurPA').val().replace(/,/g, '');            $scope.MOCurDiamt = angular.element('#txtMOCurDiamt').val().replace(/,/g, '');            if (angular.element('#chkMOCurDitag').prop('checked') == true) { $scope.MOCurDitag = true; } else { $scope.MOCurDitag = false; }            if (angular.element('#chkMOCurDiforce').prop('checked') == true) { $scope.MOCurDiforce = true; } else { $scope.MOCurDiforce = false; }            if (angular.element('#chkMOCurAlteredBasic').prop('checked') == true) { $scope.MOCurAlteredBasic = true; } else { $scope.MOCurAlteredBasic = false; }                        //$scope.MORule = angular.element('#txtOrder3').val();            if (angular.element('#chkIsMemo').prop('checked') == true) { $scope.IsMemo = true; } else { $scope.IsMemo = false; }            //$scope.MOType = angular.element('#txtOrder3').val();            //$scope.MOOrder = angular.element('#txtRegionCode').val();            $scope.RegionCode = angular.element('#txtRegionCode').val();            $scope.Location = angular.element('#txtOrder2').val();            $scope.CutMos2 = angular.element('#txtCutMos2').val();            $scope.CutDays2 = angular.element('#txtCutDays2').val();
            $scope.MONewGross = angular.element('#txtMONewGross').val().replace(/,/g, '');            $scope.MONewBasic = angular.element('#txtMONewBasic').val().replace(/,/g, '');            $scope.MONewRep = angular.element('#txtMONewRep').val().replace(/,/g, '');            $scope.MONewTrav = angular.element('#txtMONewTrav').val().replace(/,/g, '');            $scope.MONewPA = angular.element('#txtMONewPA').val().replace(/,/g, '');            $scope.MONewDiamt = angular.element('#txtMONewDiamt').val().replace(/,/g, '');            if (angular.element('#chkMONewDitag').prop('checked') == true) { $scope.MONewDitag = true; } else { $scope.MONewDitag = false; }            if (angular.element('#chkMONewDiforce').prop('checked') == true) { $scope.MONewDiforce = true; } else { $scope.MONewDiforce = false; }            if (angular.element('#chkMONewAlteredBasic').prop('checked') == true) { $scope.MONewAlteredBasic = true; } else { $scope.MONewAlteredBasic = false; }
            $scope.MOCurIncAmt = angular.element('#txtMOConfAmt').val().replace(/,/g, '');            //$scope.MOCurPct = angular.element('#txtMOPCT').val();            //$scope.MOCurConfAmt = angular.element('#txtMOCurGross').val();            $scope.MOIncAmt = angular.element('#txtMOIncAmt').val().replace(/,/g, '');            $scope.MOPCT = angular.element('#txtMOPCT').val();            $scope.MOConfAmt = angular.element('#txtMOConfAmt').val().replace(/,/g, '');                        //Premium            $scope.LEGALHRS = angular.element('#txtLegalHolidayOT').val().replace(/,/g, '');            $scope.SPECIALHRS = angular.element('#txtSpecialHolidayOT').val().replace(/,/g, '');            $scope.LEGALRESTHRS = angular.element('#txtLegalRestdayOT').val().replace(/,/g, '');            $scope.SPECIALRESTHRS = angular.element('#txtSpecialRestdayOT').val().replace(/,/g, '');            $scope.PGROSSBASIS = angular.element('#txtBaseGrossOT').val().replace(/,/g, '');
            $scope.LEGALAMT = angular.element('#txtLegalHolidayAmtOT').val().replace(/,/g, '');            $scope.SPECIALAMT = angular.element('#txtSpecialHolidayAmtOT').val().replace(/,/g, '');            $scope.LEGALRESTAMT = angular.element('#txtLegalRestdayAmtOT').val().replace(/,/g, '');            $scope.SPECIALRESTAMT = angular.element('#txtSpecialRestdayAmtOT').val().replace(/,/g, '');            $scope.TOTLSAMT = angular.element('#txtTotalLSAmtOT').val().replace(/,/g, '');
            var structUser = {                UserID: $scope.UserID,                UserLevel: $scope.UserLevel,            };            var structInfo = {                EmpNo: $scope.EmployeeNo,                SGVNo: $scope.SGVNo,                LastName: $scope.LastName,                FirstName: $scope.FirstName,                MiddleName: $scope.MiddleName,                DateHired: $scope.DateHired,                DateResigned: $scope.DateResigned,                Position: $scope.Position,                Institution: $scope.PARSubsidiaryKey,                Institution2: $scope.PayrollSubsidiaryKey,                Unit: $scope.PARUnit,                Unit2: $scope.PARSubUnit,                TagVP: $scope.TagVP,                TagVPDate: $scope.TagVPDate            };            var structBonus = {                NoOfMonths: $scope.NoOfMonths,                NoOfDays: $scope.NoOfDays,                CutInLenMonth: $scope.CutInLenMonth,                CutInLenDays: $scope.CutInLenDays            }            var structLeaves = {                NEWGROSS: $scope.NEWGROSS,                NONT_VL: $scope.NONT_VL,                NONT_AMT: $scope.NONT_AMT,                TAXB_VL: $scope.TAXB_VL,                TAXB_SL: $scope.TAXB_SL,                VLSL_TX: $scope.VLSL_TX,                TAXB_AMT: $scope.TAXB_AMT            }            var structOtherInfo = {                CurrentRule: $scope.CurrentRule,                CurrentGross: $scope.CurrentGross,                CurrentBasic: $scope.CurrentBasic,                CurrentRA: $scope.CurrentRA,                CurrentTA: $scope.CurrentTA,                CurrentPA: $scope.CurrentPA,                CurrentPACnt: $scope.CurrentPACnt,                CurrentCard: $scope.CurrentCard,                CurrentCardTag: $scope.CurrentCardTag,                CurrentCreditRatio: $scope.CurrentCreditRatio,                CurrentForceCC: $scope.CurrentForceCC,                CurrentForceBasic: $scope.CurrentForceBasic,
                IncreaseCurPercent: $scope.IncreaseCurPercent,                IncreaseCurConfirm: $scope.IncreaseCurConfirm,                IncreaseCurAmount: $scope.IncreaseCurAmount,                IncreaseNewPercent: $scope.IncreaseNewPercent,                IncreaseNewConfirm: $scope.IncreaseNewConfirm,                IncreaseNewAmount: $scope.IncreaseNewAmount,                IncreaseIsProrated: $scope.IncreaseIsProrated,                IncreaseMemoOnly: $scope.IncreaseMemoOnly,
                NewRule: $scope.NewRule,                NewGross: $scope.NewGross,                NewBasic: $scope.NewBasic,                NewRA: $scope.NewRA,                NewTA: $scope.NewTA,                NewPA: $scope.NewPA,                NewPACnt: $scope.NewPACnt,                NewCard: $scope.NewCard,                NewCardTag: $scope.NewCardTag,                NewCreditRatio: $scope.NewCreditRatio,                NewForceCC: $scope.NewForceCC,                NewForceBasic: $scope.NewForceBasic,                IsProlongLeave: $scope.IsProlongLeave,                IsException: $scope.IsException            }            var structRecom = {                LastPromoDate: $scope.LastPromoDate,                EvaluationDate: $scope.EvaluationDate,                LMOVENAT: $scope.LMOVENAT,                PAR_C: $scope.PAR_C,                PAR_N: $scope.PAR_N,                BAREA: $scope.BAREA,                BELLAREA: $scope.BELLAREA,                BELLPOSDESC: $scope.BELLPOSDESC,                TagProlonged: $scope.TagProlonged,                TagException: $scope.TagException,                Recomd: $scope.Recomd,                Rank: $scope.Rank,            }
            var structCurrentSalaryMemo = {                MOCurGross: $scope.MOCurGross,                MOCurBasic: $scope.MOCurBasic,                MOCurRep: $scope.MOCurRep,                MOCurTrav: $scope.MOCurTrav,                MOCurPA: $scope.MOCurPA,                MOCurDiamt: $scope.MOCurDiamt,                MOCurDitag: $scope.MOCurDitag,                MOCurDiforce: $scope.MOCurDiforce,                MOCurAlteredBasic: $scope.MOCurAlteredBasic            }            var structNewSalaryMemo = {                MONewGross: $scope.MONewGross,                MONewBasic: $scope.MONewBasic,                MONewRep: $scope.MONewRep,                MONewTrav: $scope.MONewTrav,                MONewPA: $scope.MONewPA,                MONewDiamt: $scope.MONewDiamt,                MONewDitag: $scope.MONewDitag,                MONewDiforce: $scope.MONewDiforce,                MONewAlteredBasic: $scope.MONewAlteredBasic            }            var structIncreaseMemo = {                MOCurIncAmt: $scope.MOCurIncAmt,                //MOCurPct: $scope.MOCurPct,                //MOCurConfAmt: $scope.MOCurConfAmt,                MOIncAmt: $scope.MOIncAmt,                MOPCT: $scope.MOPCT,                MOConfAmt: $scope.MOConfAmt            }            var structMemo = {                //MORule: '',                IsMemo: $scope.IsMemo,                //MOType: '',                //MOOrder: '',                Order1: $scope.MemoOrder,                Order2: $scope.Location,                Order3: $scope.NameOrder,                RegionCode: $scope.RegionCode,                CutMos2: $scope.CutMos2,                CutDays2: $scope.CutDays2,
                CurrentSalaryMemo: structCurrentSalaryMemo,                NewSalaryMemo: structNewSalaryMemo,                IncreaseMemo: structIncreaseMemo            }            var structPremium = {                LEGALHRS: $scope.LEGALHRS,                SPECIALHRS: $scope.SPECIALHRS,                LEGALRESTHRS: $scope.LEGALRESTHRS,                SPECIALRESTHRS: $scope.SPECIALRESTHRS,                PGROSSBASIS: $scope.PGROSSBASIS,                LEGALAMT: $scope.LEGALAMT,                SPECIALAMT: $scope.SPECIALAMT,                LEGALRESTAMT: $scope.LEGALRESTAMT,                SPECIALRESTAMT: $scope.SPECIALRESTAMT,                TOTLSAMT: $scope.TOTLSAMT            };
            var _Params = { 'User': structUser, 'Info': structInfo, 'OtherInfo': structOtherInfo, 'Bonus': structBonus, 'Leave': structLeaves, 'Recom': structRecom, 'Premium': structPremium, 'Memo': structMemo};                        $scope.CurBasicRATACard = (parseFloat($scope.CurrentBasic) + parseFloat($scope.CurrentRA) + parseFloat($scope.CurrentTA) + parseFloat($scope.CurrentCard));            $scope.NewBasicRATACard = (parseFloat($scope.CurrentBasic) + parseFloat($scope.CurrentRA) + parseFloat($scope.CurrentTA) + parseFloat($scope.CurrentCard));
            if ($scope.MemoOrder != 0 || $scope.NameOrder != 0) { //add validation for this PSM                $scope.bMemoNameOrder = true;            } else {                $scope.bMemoNameOrder = false;            }
            $scope.SaveAllFields = function () {                srvcEmployeeDetails.ShowConfirmMessage('divPopupConfirm', 'Employee Maintenance Window', 'Do you want to automatically process MIP/MEMO <br/> (Copy to MIP, Process Current and Process New)?').then(function (val) {                    srvcEmployeeDetails.ShowLoader('divPopupLoader', 'Please wait while Saving Records...');                    $http({                        url: '/Employee/SaveRecord',                        method: "POST",                        data: $.param(_Params),                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }                    }).then(function (result) {                        srvcEmployeeDetails.RefreshList("", 1);                        $timeout(function () { srvcEmployeeDetails.CloseMessage(); }, 1000).then(function () {                            $timeout(function () {                                srvcEmployeeDetails.ShowMessage("divPopupSaveResult", "Employee Maintenance Window", "Record Saved Successfully.");                            })                        });                    }).catch(function (response) {                        srvcEmployeeDetails.CloseMessage();                        srvcEmployeeDetails.ShowErrorMessage("Error Message", response.statusText);                    });                }, function (err) {                    srvcEmployeeDetails.CloseMessage();                });            }
            if ($scope.CurBasicRATACard.toFixed(2) != $scope.CurrentGross) {                srvcEmployeeDetails.ShowConfirmMessage('divPopupConfirm', 'Employee Maintenance Window', 'Sum of current (basic+rata+ccard) is not equal to current gross (Under Recommendation tab) </br> do you wish to continue saving?')                .then(function (result) {                    $scope.SaveAllFields();                });            } else {                                if ($scope.bMemoNameOrder == false) {                    srvcEmployeeDetails.ShowConfirmMessage('divPopupConfirm', 'Employee Maintenance Window', 'Memo Order and Name Order are not set properly. Do you want to automatically generate it?').then(function (e) {                        $timeout(function () { $scope.GenerateOrder(); }, 1000).then(function () {                            $scope.SaveAllFields();                        })                    }, function (err) {                        $scope.SaveAllFields();                    });                } else {                    $scope.SaveAllFields();                }            }
                        $scope.GenerateOrder = function () {                 $http.get('/Memo/GenerateOrder', { params: { 'Empno': $scope.EmployeeNo, 'Recomd': $scope.Recomd } })               .then(function (response) {
                   //$scope.MemoField.Order1 = response.data.Order1;                   //$scope.MemoField.Order3 = response.data.Order3;                   angular.element('#txtOrder1').val(response.data.Order1);                   angular.element('#txtOrder3').val(response.data.Order3);               })
            }
        }    }
    $scope.CloseMessage = function (Title, Message) {        srvcEmployeeDetails.CloseMessage();    }
});
MainApp.controller('Error', function (srvcEmployeeDetails) {    $scope.ShowError = function (Title, Message) {        srvcEmployeeDetails.ShowMessage(Title, Message)    }    });
MainApp.directive('restrictTo', function() {    return {        restrict: 'A',        link: function (scope, element, attrs) {            var re = RegExp(attrs.restrictTo);            var exclude = /Backspace|Enter|Tab|Delete|Del|ArrowUp|Up|ArrowDown|Down|ArrowLeft|Left|ArrowRight|Right/;
            element[0].addEventListener('keydown', function(event) {                if (!exclude.test(event.key) && !re.test(event.key)) {                    event.preventDefault();                }            });        }    }});
MainApp.directive('dateNow', ['$filter', function($filter) {  return {    link: function( $scope, $element, $attrs) {      $element.text($filter('date')(new Date(), $attrs.dateNow));    }  };}])
MainApp.controller('sessionState', function () {    $scope.DestroySession = function () {        $http.get('/Employee/DestroySession').catch(function (error) {            console.log(error);        })    }
    $scope.GetSession = function () {        //$http.get('/Employee/GetSession').then(function (e) {        //    $scope.Session = e.data;        //    $scope.UserID = e.data.UserID;        //    $scope.UserLevel = e.data.UserLevel;        //    $rootScope.$broadcast('GetUserLevel', $scope.UserLevel);        //    _UserID = $scope.UserID;        //    if (_UserID == null) {        //        $window.location.href = 'ErrorPage.html';        //        //$scope.DestroySession();        //    } else {        //        $scope.EmployeeName = e.data.EmployeeName;        //        $scope.Rank = e.data.Rank;        //    }        //}).catch(function (error) {        //    console.log(error);        //    alert(error);        //})    }})
MainApp.controller('fieldLock', function ($scope, srvcEmployeeDetails) {
    $scope.initFieldLock = function () {        $scope.enable = true;        angular.element('.date-picker').datepicker('disable');    }
    $scope.enabled = function () {        $scope.enable = !$scope.enable;        angular.element('.date-picker').datepicker($scope.enable ? 'disable' : 'enable');    }
    $scope.enable = true;    $scope.tblEmployeeListOff = false;    $scope.refreshOff = true;    $scope.searchhOff = true;    $scope.newOff = true;    $scope.editOff = true;    $scope.deleteOff = true;    $scope.saveOff = true;    $scope.cancelOff = true;    //$scope.refreshOff = false;    //$scope.searchhOff = false;    //$scope.newOff = false;    //$scope.editOff = false;    //$scope.deleteOff = false;    //$scope.saveOff = false;    //$scope.cancelOff = false;
    $scope.SetMenuButton = function () {        $scope.tblEmployeeListOff = true;        $scope.refreshOff = false;        $scope.searchhOff = false;        $scope.newOff = false;        $scope.editOff = false;        $scope.deleteOff = true;        $scope.saveOff = true;        $scope.cancelOff = true;        //angular.element('.date-picker').datepicker('disable');        //$scope.enabled();    }
    $scope.editButton = function () {        $scope.tblEmployeeListOff = false;        $scope.refreshOff = false;        $scope.searchhOff = false;        $scope.newOff = false;        $scope.editOff = true;        $scope.deleteOff = false;        $scope.saveOff = false;        $scope.cancelOff = false;        $scope.enabled();        srvcEmployeeDetails.SetEmployeeListOff(false);        //angular.element('#tblEmployeeList').attr('disable', 'false');    }    $scope.cancelButton = function () {        $scope.tblEmployeeListOff = true;        $scope.refreshOff = false;        $scope.searchhOff = false;        $scope.newOff = true;        $scope.editOff = false;        $scope.deleteOff = true;        $scope.saveOff = true;        $scope.cancelOff = true;        $scope.enabled();        srvcEmployeeDetails.SetEmployeeListOff(true);    }});
MainApp.controller('refresh', function ($scope, $http, ngDialog, $rootScope, srvcEmployeeDetails) {    $scope.RefreshList = function () {        srvcEmployeeDetails.GetAllEmployeeList($scope.EmployeeNo, $scope.SelectedKey.key).then(function (e) {            $rootScope.$broadcast('RefreshEmployeeList', e);        });    }});
MainApp.controller('popup', function ($scope, $http, ngDialog, $rootScope, srvcEmployeeDetails) {    $scope.showModal = false;    $scope.open = function () {        $scope.showModal = !$scope.showModal;    };
    $scope.value = true;    $scope.Searchtitle = "";    $scope.popupSearchTitle = function (valtitle) {        $scope.Searchtitle = valtitle;    };
    var popId = {};    $scope.popupOpenSearch = function () {        popId = ngDialog.open({            template: 'divPopupSearch',            plain: false,            showClose: false,            backdrop: 'static',            closeByDocument: false,            //controller: 'popup',            //scope: $scope,            width: 440        });    };            $scope.closedSearchDialog = function () {        ngDialog.close(popId);    }        $scope.GetSearchResult = function () {        if ($scope.EmployeeNo.length > 0)        {            srvcEmployeeDetails.GetEmployeeList($scope.EmployeeNo, $scope.SelectedKey.key).then(function (e) {                $rootScope.$broadcast('RefreshEmployeeList', e);            });                   }    }
    // ************************************************** //    // SUCGANG RUEL - BEGIN ( inside the ainApp.controller('popup')    // ************************************************** //
    //INSERTED BY RUEL FOR EXTERNAL EXPORT 08.30.2017    $scope.OpenExternalExport = function () {        ngDialog.open({            template: 'dvExternalExport',            plain: false,            scope: $scope,            showClose: false,            backdrop: 'static',            closeByDocument: false,            width: 440        });    }    //INSERTED BY RUEL FOR EXTERNAL EXPORT 08.30.2017
    //INSERTED BY RUEL FOR EXTERNAL EXPORT 08.30.2017    $scope.OpenRestoreArchiveNormal = function () {        ngDialog.open({            template: 'dvRestoreArchiveNormal',            plain: false,            scope: $scope,            showClose: false,            backdrop: 'static',            closeByDocument: false,            width: 440        });    }    $scope.OpenRestoreArchiveAppend = function () {        ngDialog.open({            template: 'dvRestoreArchiveAppend',            plain: false,            scope: $scope,            showClose: false,            backdrop: 'static',            closeByDocument: false,            width: 440        });    }    //INSERTED BY RUEL FOR EXTERNAL EXPORT 08.30.2017
    //INSERTED BY RUEL FOR  IMPORT 09.15.2017    $scope.OpenImport = function () {        ngDialog.open({            template: 'dvImport',            plain: false,            scope: $scope,            showClose: false,            backdrop: 'static',            closeByDocument: false,            width: 440        });    }    //INSERTED BY RUEL FOR  IMPORT 09.15.2017
    // ************************************************** //    // SUCGANG RUEL - END    // ************************************************** //
    //$scope.$on('ngDialog.closing', function () {    //    if ($scope.EmployeeNo.length > 0)    //    {    //        $scope.GetSearchResult($scope.EmployeeNo, $scope.SelectedKey);    //    }            //});});-- end of EmployeeParRecom

-- start of EmployeeRecom


var appRecom = angular.module('appRecom', [])
appRecom.controller('cntrlRecom', function ($scope, $http, $rootScope, ngDialog, srvcEmployeeDetails, $timeout) {
    $scope.Recomd = [];    $scope.RecomdList = [];    $scope.Lmovenat = [];    $scope.LmovenatList = [];    $scope.BellArea = [];    $scope.BellAreaList = [];    $scope.field = [];    $scope.RecomField = [];    $scope.CurSalaryField = [];    $scope.NewSalaryField = [];    $scope.IncField = [];    $scope.Empno = '';    $scope.Pos = '';    $scope.NewPos = '';    $scope.pfposiDiamt = 0;    $scope.posFromInfoTab = '';    $scope.isPromoSelected = false;    $scope.procDiagID = '';
            $rootScope.$on('GetUserLevel', function (event, args) {        $scope.UserLevel = args.UserLevel;        $http.get('/Recommendation/RecomDropdownCollection', { params: { "Param": 'recom', "userLevel": $scope.UserLevel } })          .then(function (response) {              $scope.RecomdList = response.data;              $scope.Recomd = $scope.RecomdList[0];              $scope.LmovenatList = response.data;              $scope.Lmovenat = $scope.LmovenatList[0];          });        $http.get('/Recommendation/RecomDropdownCollection', { params: { "Param": 'bellarea', "userLevel": $scope.UserLevel } })            .then(function (response) {                $scope.BellAreaList = response.data;                $scope.BellArea = $scope.BellAreaList[0];            });
    })
    //$scope.init = function () {    //    $http.get('/Recommendation/RecomDropdownCollection', { params: { "Param": 'recom', "userLevel": $scope.UserLevel } })    //        .then(function (response) {    //            $scope.RecomdList = response.data;    //            $scope.Recomd = $scope.RecomdList[0];    //            $scope.LmovenatList = response.data;    //            $scope.Lmovenat = $scope.LmovenatList[0];    //        });    //    $http.get('/Recommendation/RecomDropdownCollection', { params: { "Param": 'bellarea', "userLevel": $scope.UserLevel } })    //        .then(function (response) {    //            $scope.BellAreaList = response.data;    //            $scope.BellArea = $scope.BellAreaList[0];    //        });            //}
    $rootScope.$on('GetEmployeeRecom', function (event, args) {        $scope.RecomField = args.Recommendation;        $scope.CurSalaryField = args.CurSalary;        $scope.NewSalaryField = args.NewSalary;        $scope.IncField = args.Increase;        $scope.Empno = args.Empno;        $scope.Pos = args.Pos;        $scope.NewPos = args.NewPos;        $scope.posFromInfoTab = $scope.Pos;    })
    $rootScope.$on('GetRankFromInfoTab', function (event, args) {        $scope.posFromInfoTab = args;    })    
    $scope.ChangeOfCurSalary = function () {
        ratio = $scope.CurSalaryField.CurRule;        curGross = isNaN($scope.CurSalaryField.CurGross) ? 0 : $scope.CurSalaryField.CurGross;        curPacnt = $scope.CurSalaryField.CurPacnt;        curCcard = $scope.CurSalaryField.CurDiamt;        $scope.CurSalaryField.CurGross = curGross;        $scope.CurSalaryField.CurPa = (curGross * curPacnt).toFixed(2);        $scope.CurSalaryField.CurBasic = Basicamt(curGross, curCcard, Emprule(ratio, "prata"), Emprule(ratio, "pbasic")).toFixed(2);        $scope.CurSalaryField.CurRep = RATAamt(curGross, curCcard, Emprule(ratio, "prata"), Emprule(ratio, "pra")).toFixed(2);        $scope.CurSalaryField.CurTrav = RATAamt(curGross, curCcard, Emprule(ratio, "prata"), Emprule(ratio, "pta")).toFixed(2);        $scope.CurDiforce = IsAlteredBasic(curGross, $scope.CurSalaryField.CurBasic, Emprule(ratio, "pbasic"));            }

    $scope.ChangeOfNewSalary = function () {
        ratio = $scope.NewSalaryField.NewRule;        newGross = isNaN($scope.NewSalaryField.NewGross) ? 0 : $scope.NewSalaryField.NewGross;        newPacnt = $scope.NewSalaryField.NewPacnt;        newCcard = $scope.NewSalaryField.NewDiamt;        curGross = $scope.CurSalaryField.CurGross;
        $scope.NewSalaryField.NewPa = (newGross * newPacnt).toFixed(2);        $scope.NewSalaryField.NewIncPct = (((newGross - curGross) / curGross) * 100).toFixed(2);        $scope.IncField.NewIncConfAmt = (newGross - curGross).toFixed(2);
        $scope.NewSalaryField.NewBasic = Basicamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pbasic")).toFixed(2);        $scope.NewSalaryField.NewRep = RATAamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pra")).toFixed(2);        $scope.NewSalaryField.NewTrav = RATAamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pta")).toFixed(2);        $scope.NewSalaryField.NewDiforce = IsAlteredBasic(newGross, $scope.NewSalaryField.NewBasic, Emprule(ratio, "pbasic"));        $scope.NewSalaryField.NewGross = newGross;    }
    $scope.ChangeOfNewIncrease = function (arg) {
        if (arg == 'percent') {            $scope.IncField.NewIncConfAmt = (Math.round(($scope.CurSalaryField.CurGross * $scope.IncField.NewIncPct / 100) * 0.01, 0) * 100).toFixed(2);        }        else {                        $scope.IncField.NewIncConfAmt = isNaN($scope.IncField.NewIncConfAmt) ? 0 : $scope.IncField.NewIncConfAmt;            $scope.IncField.NewIncPct = (($scope.IncField.NewIncConfAmt / $scope.CurSalaryField.CurGross).toFixed(4) * 100).toFixed(2);        }
        ratio = $scope.NewSalaryField.NewRule;        newCcard = $scope.NewSalaryField.NewDiamt;        newGross = $scope.CurSalaryField.CurGross + parseFloat($scope.IncField.NewIncConfAmt);//parsing is use because when ng-change is fired, input became string format (applicable only in addition)        newPacnt = $scope.NewSalaryField.NewPacnt;        $scope.NewSalaryField.NewGross = newGross.toFixed(2);        $scope.NewSalaryField.NewPa = newGross * newPacnt.toFixed(2);        $scope.NewSalaryField.NewBasic = Basicamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pbasic")).toFixed(2);        $scope.NewSalaryField.NewRep = RATAamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pra")).toFixed(2);        $scope.NewSalaryField.NewTrav = RATAamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pta")).toFixed(2);
    }
    $scope.ChangeOfCurCcard = function (arg) {        $http.get('/Recommendation/GetPfposi', { params: { "pos": $scope.Pos } })                .then(function (response) {
                    pfposiDiamt = response.data.Diamt;
                    if (arg == 'ditag') {                        if ($scope.CurSalaryField.CurDitag == true) {                            $scope.CurSalaryField.CurDiamt = pfposiDiamt;                        }                        else {                            $scope.CurSalaryField.CurDiamt = 0;                        }                    }
                    ratio = $scope.CurSalaryField.CurRule;                    curGross = $scope.CurSalaryField.CurGross;                    curCcard = isNaN($scope.CurSalaryField.CurDiamt) ? 0 : $scope.CurSalaryField.CurDiamt;                    $scope.CurSalaryField.CurDiamt = curCcard;                    $scope.CurSalaryField.CurBasic = Basicamt(curGross, curCcard, Emprule(ratio, "prata"), Emprule(ratio, "pbasic")).toFixed(2);                    $scope.CurSalaryField.CurRep = RATAamt(curGross, curCcard, Emprule(ratio, "prata"), Emprule(ratio, "pra")).toFixed(2);                    $scope.CurSalaryField.CurTrav = RATAamt(curGross, curCcard, Emprule(ratio, "prata"), Emprule(ratio, "pta")).toFixed(2);                    $scope.CurSalaryField.CurAlteredBasic = IsAlteredBasic(curGross, $scope.CurSalaryField.CurBasic, Emprule(ratio, "pbasic"));                    $scope.CurSalaryField.CurDiforce = IsDiForce(curCcard, pfposiDiamt);                    $scope.CurSalaryField.CurDitag = IsCcard(curCcard);                });
    }
    $scope.ChangeOfNewCcard = function (arg) {
        $http.get('/Recommendation/GetPfposi', { params: { "pos": $scope.NewPos == '' ? $scope.Pos : $scope.NewPos } })                .then(function (response) {
                    pfposiDiamt = response.data.Diamt;
                    if (arg == 'ditag') {                        if ($scope.NewSalaryField.NewDitag == true) {                            $scope.NewSalaryField.NewDiamt = pfposiDiamt;                        }                        else {                            $scope.NewSalaryField.NewDiamt = 0;                        }                    }
                    ratio = $scope.NewSalaryField.NewRule;                    newGross = $scope.NewSalaryField.NewGross;                    newCcard = isNaN($scope.NewSalaryField.NewDiamt) ? 0 : $scope.NewSalaryField.NewDiamt;                                        $scope.NewSalaryField.NewBasic = Basicamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pbasic")).toFixed(2);                    $scope.NewSalaryField.NewRep = RATAamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pra")).toFixed(2);                    $scope.NewSalaryField.NewTrav = RATAamt(newGross, newCcard, Emprule(ratio, "prata"), Emprule(ratio, "pta")).toFixed(2);                    $scope.NewSalaryField.NewAlteredBasic = IsAlteredBasic(newGross, $scope.NewSalaryField.NewBasic, Emprule(ratio, "pbasic"));                    $scope.NewSalaryField.NewDiforce = IsDiForce(newCcard, pfposiDiamt);                    $scope.NewSalaryField.NewDitag = IsCcard(newCcard);                    $scope.NewSalaryField.NewDiamt = newCcard;                });    }
    $scope.ChangeOfThisYearRecom = function () {
        if ($scope.RecomField.Recomd.toLowerCase() == 'pr') {            $http.get('/Recommendation/GetNextRank', { params: { "thisRank": $scope.Pos, "isDownward": false } })                .then(function (response) {                    $scope.RecomField.Rank = response.data;                    $rootScope.$broadcast('GetNewRank', $scope.RecomField.Rank.split('|')[0].trim());                    $scope.isPromoSelected = true;                    $scope.posFromInfoTab = $scope.RecomField.Rank.split('|')[0].trim();                });        }        else {            if ($scope.isPromoSelected == true) {                $http.get('/Recommendation/GetNextRank', { params: { "thisRank": $scope.posFromInfoTab, "isDownward": true } })                  .then(function (response) {
                      $rootScope.$broadcast('GetNewRank', response.data.split('|')[0].trim());                      $scope.RecomField.Rank = '';                      $scope.isPromoSelected = false;                      $scope.posFromInfoTab = response.data.split('|')[0].trim();                  });            }        }
    }


    $scope.Printmemo = function () {                srvcEmployeeDetails.ShowLoader('divPopupLoader', 'Please wait while report is being generated.')
        $http({            url: '/Reports/generateReport',            method: "POST",            params: { 'reportID': "rptmemos", 'userlevel': $scope.UserLevel, 'empno': $scope.Empno },            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }        })        .then(function (response) {                        $timeout(function () {                srvcEmployeeDetails.CloseMessage();            }, 1000).then(function () {                                    srvcEmployeeDetails.ShowMessage("divPopupResult", "Memo", ' completed.')                    window.location = '/home/DownloadFile?newFile=' + response.data[0];                                                });                       
        }).catch(function () {            alert("Error occured while report is being generated.");        });
    }
    $scope.Resetnewinc = function () {        $http.get('/Recommendation/ResetNewIncrease', { params: { 'empno': $scope.Empno } })            .then(function (response) {                $scope.IncField = response.data;            });           }
    $scope.Resetnewsalary = function () {        $http.get('/Recommendation/ResetNewSalary', { params: { 'empno': $scope.Empno } })            .then(function (response) {                $scope.NewSalaryField = response.data;            });    }
    $scope.Processmemo = function () {        //ShowProcessMemo();
        $scope.procDiagID = ngDialog.open({            template: 'dvProcMemo',            plain: false,            showClose: false,            backdrop: 'static',            closeByDocument: false,            scope: $scope,            //controller: 'cntrlEmployee',            //scope: $scope,            width: 380        });
    }

    $scope.Procmemo_copymip = function () {        $http.get('/Recommendation/CopyMIPtoMemo', { params: { "Empno": $scope.Empno, "userLevel": $scope.UserLevel } })        .then(function (response) {            $rootScope.$broadcast('Update_mipfields', response.data);        });    }
    $scope.Procmemo_current = function () {        $http.get('/Memo/ProcessMemo', { params: { "empno": $scope.Empno, "motype": 'cur', "userLevel": $scope.UserLevel } })        .then(function (response) {            $rootScope.$broadcast('Update_mipfields', response.data);        });    }
    $scope.Procmemo_new = function () {        $http.get('/Memo/ProcessMemo', { params: { "empno": $scope.Empno, "motype": 'new', "userLevel": $scope.UserLevel } })        .then(function (response) {            $rootScope.$broadcast('Update_mipfields', response.data);        });    }
    $scope.Procmemo_usememo = function () {        $http.get('/Memo/Usememoforprinting', { params: { "empno": $scope.Empno, "ismemo": true } })        .then(function (response) {            $rootScope.$broadcast('Update_memoforprintingonly', response.data.IsMemo);        });    }
    $scope.Procmemo_nousememo = function () {        $http.get('/Memo/Usememoforprinting', { params: { "empno": $scope.Empno, "ismemo": false } })         .then(function (response) {             $rootScope.$broadcast('Update_memoforprintingonly', response.data.IsMemo);         });    }

    $scope.closeProcDiag = function () {        ngDialog.close($scope.procDiagID);    }
     
 });   

function ShowProcessMemo() {
    $("#dvProcessmemo").dialog({        modal: true,        resizable: false,        maxwidth: 400,        maxheight: 320,        width: 400,        height: 320,        open: function (event, ui) {            //AlterPopUPDesign($("#dvProcessmemo"), '')
        },        close: function () {            $(this).dialog("destroy");        }    });
}
function Emprule(_ratio, _key) {    _pbase = 0;    _pBasic = 0;    _pRa = 0;    _pTa = 0;    _nReturn = 0;
    if (_ratio.split(":").length == 3) {        _pBasic = _ratio.split(":")[0];        _pRa = _ratio.split(":")[1];        _pTa = _ratio.split(":")[2];        _pBasic = _pBasic / 100;        _pRa = _pRa / 100;        _pTa = _pTa / 100;        _pBase = _pBasic + _pRa + _pTa;        switch (_key.toLowerCase()) {            case "pbasic": nReturn = _pBasic / _pBase; break;            case "pra": nReturn = _pRa / _pBase; break;            case "pta": nReturn = _pTa / _pBase; break;            case "prata": nReturn = (_pRa / _pBase) + (_pTa / _pBase); break;            default: nReturn = 0; break;        }    }
    return nReturn;}
function Basicamt(_gross, _diamt, _prata, _pbasic) {    nReturn = 0;    if (_diamt > (_gross * _prata))        nReturn = _gross - _diamt;    else        nReturn = _gross * _pbasic;
    return nReturn;}
function RATAamt(_gross, _diamt, _prata, _RaTa) {    nReturn = 0;    if (_diamt > (_gross * _prata))        nReturn = 0    else        nReturn = ((_gross * _prata) - _diamt) * (_RaTa / _prata);
    return nReturn;}
function IsAlteredBasic(_gross, _basic, _pbasic) {
    return _basic != (_gross * _pbasic) ? true : false;}
function IsDiForce(_diamt, _pfposi_diamt) {    return !(_diamt == _pfposi_diamt) && _diamt > 0 ? true : false;}
function IsCcard(_diamt) {    return _diamt == 0 ? false : true;}
//ral20171004//angular.element('.date-picker').datepicker('disable');-- end of EmployeeRecom
-- start of Filter///* FILTER STARTS HERE */var appFilter = angular.module('appFilter', []);appFilter.controller('cntrlFilter', function ($scope, $http, $rootScope, ngDialog, srvcEmployeeDetails, $timeout) {
    $scope.SelectedRank = 0; $scope.SelectedRM = 0; $scope.SelectedRecom = 0; $scope.SelectedHM = 0; $scope.SelectedHF = 0; $scope.SelectedRF = 0;    $scope.SelectedSubsidiary = 0; $scope.SelectedResM = 0; $scope.SelectedZOG = 0; $scope.SelectedZOB = 0; $scope.SelectedZNG = 0; $scope.SelectedZNB = 0;    $scope.SelectedOS = 0; $scope.SelectedNS = 0; $scope.SelectedZBA = 0; $scope.SelectedZLA = 0; $scope.SelectedZOA = 0; $scope.SelectedNBD = 0; $scope.SelectedNLD = 0;    $scope.SelectedNOD = 0; $scope.SelectedCG = 0; $scope.SelectedINC = 0; $scope.SelectedESL = 0; $scope.Selectedother = 0; $scope.Selectedother2 = 0; $scope.Selectedother3 = 0;    $scope.SelectedIncludeCurGross = false; $scope.SelectedIncludeNewGross = false;    $scope.Rank = 0; $scope.RankList = []; $scope.RM = 0; $scope.RMList = []; $scope.Recom = 0; $scope.RecomList = []; $scope.Subsidiary = 0; $scope.SubsidiaryList = [];    $scope.HM = 0; $scope.HMList = []; $scope.HF = ""; $scope.HT = ""; $scope.RF = ""; $scope.RT = ""; $scope.ResM = 0; $scope.ResMList = []; $scope.ZOG = 0; $scope.ZOGList = [];    $scope.ZOB = 0; $scope.ZOBList = []; $scope.ZNG = 0; $scope.ZNGList = []; $scope.ZNB = 0; $scope.ZNBList = []; $scope.OS = 0; $scope.OSList = []; $scope.NS = 0; $scope.NSList = [];    $scope.ZBA = 0; $scope.ZBAList = []; $scope.ZLA = 0; $scope.ZLAList = []; $scope.ZOA = 0; $scope.ZOAList = []; $scope.NBD = 0; $scope.NBDList = [];    $scope.NLD = 0; $scope.NLDList = []; $scope.NOD = 0; $scope.NODList = []; $scope.CG = 0; $scope.CGList = []; $scope.INC = 0; $scope.INCList = [];    $scope.ESL = 0; $scope.ESLList = []; $scope.other = 0; $scope.otherList = []; $scope.other2 = []; $scope.otherList2 = [];    $scope.other3 = []; $scope.otherList3 = []; $scope.IncludeCurGross = false; $scope.IncludeNewGross = false;    $scope.UserLevel = '';    $scope.ArchivePath = 'C:\\_dumpfiles\\';    $scope.ExportPath = 'C:\\_dumpfiles\\';    $scope.RestoreArchiveNormalPath = '';    $scope.ImportPath = 'C:\\_dumpfiles\\';
    $scope.today = new Date();    $scope.UserID = "";    //$scope.TotalImportExcelRecords = 1;    $scope.ImportProcessResultModel = [         { "ImportUserID": '', "TotalExcelRecords": 0, "TotalProcessed": 0, "Accepted": 0, "Excluded": 0, "Invalid": 0, "TotalNotProcessed": 0 }    ]

    // EXTERNAL EXPORT (PROC 12.1) START REGION    $scope.positionList = [     { "value": '', "display": '' },     { "value": 'ALL', "display": 'ALL' },     { "value": 'NEW VP', "display": 'NEW VP' }    ];    $scope.position =""; $scope.selectedPosition = "";
    $scope.TypeList = [    { "value": 0, "display": '' },    { "value": 1, "display": 'Emp Info' },    { "value": 2, "display": 'Report' }    ];    $scope.Type =""; $scope.selectedType = "";
    $scope.StatusList = [    { "value": '', "display": '' },    { "value": 'Both', "display": 'Both' },    { "value": 'Active', "display": 'Active' },    { "value": 'Resigned', "display": 'Resigned' }    ];    $scope.status = ""; $scope.selectedStatus = "";
    $scope.IsMemoOnly = 0; $scope.IsMemoOnlySelected = 0;    $scope.IsOldSalary = 0; $scope.IsOldSalarySelected = 0;    $scope.IsNewSalary = 0; $scope.IsNewSalarySelected = 0;    $scope.IsConsolidatedRank = 0; $scope.IsConsolidatedRankSelected = 0;    $scope.IsInstitution1 = 0; $scope.IsInstitution1Selected = 0;    $scope.IsInstitution2 = 0; $scope.IsInstitution2Selected = 0;    $scope.ValidateExportValues = function () {        var exportvalidOK = true;        if ($scope.position.value == '') {             $scope.Error = "Please select a position";            srvcEmployeeDetails.ShowErrorMessage("Error Message", $scope.Error);            return;        }        if ($scope.Type.value == '')        {            $scope.Error = "Please select type";            srvcEmployeeDetails.ShowErrorMessage("Error Message", $scope.Error);        }        if ($scope.status.value == '')        {            $scope.Error = "Please select status";            srvcEmployeeDetails.ShowErrorMessage("Error Message", $scope.Error);            return;        }        if (exportvalidOK)        {            var Data = {                xPosition: $scope.selectedPosition,                xStatus: $scope.selectedStatus,                xIsmemo: $scope.IsMemoOnlySelected,                xPreProcType: $scope.selectedType            }            $http({                url: '/Filter/ProcessExternalExport',                method: "POST",                data: $.param(Data),                headers: {                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'                }            }).then(function (e) {                $timeout(function () {                    srvcEmployeeDetails.CloseMessage();                }, 1000);                FileDownload(e.data);            }              )            //$scope.ProcessExternalExport();            //ngDialog.close();        }    };    $scope.selectposition = function (selectedPosition) {        $scope.selectedPosition = selectedPosition.value;    }    $scope.selecttype = function (selectedType) {        $scope.selectedType = selectedType.value;    }    $scope.selectstatus = function (selectedStatus) {        $scope.selectedStatus = selectedStatus.value;    }    $scope.CheckMemo = function (IsMemoOnly) {        if (IsMemoOnly) {            $scope.IsMemoOnlySelected = 1;        }        else {            ope.IsMemoOnlySelected = 0;        }    }
    $scope.CheckMemo = function (IsMemoOnly) {        if (IsMemoOnly) {            $scope.IsMemoOnlySelected = 1;        }        else {            $scope.IsMemoOnlySelected = 0;        }    }    $scope.CheckOldSalary = function (IsOldSalary) {        if (IsOldSalary) {            $scope.IsOldSalarySelected = 1;        }        else {            $scope.IsOldSalarySelected = 0;        }    }    $scope.CheckNewSalary = function (IsNewSalary) {        if (IsNewSalary) {            $scope.IsNewSalarySelected = 1;        }        else {            $scope.IsNewSalarySelected = 0;        }    }    $scope.CheckConsolidatedRank = function (IsConsolidatedRank) {        if (IsConsolidatedRank) {            $scope.IsConsolidatedRankSelected = 1;        }        else {            $scope.IsConsolidatedRankSelected = 0;        }    }    $scope.CheckInstitution1 = function (IsInstitution1) {        if (IsInstitution1) {            $scope.IsInstitution1Selected = 1;        }        else {            $scope.IsInstitution1Selected = 0;        }    }    $scope.CheckInstitution2 = function (IsInstitution2) {        if (IsInstitution2) {            $scope.IsInstitution2Selected = 1;        }        else {            $scope.IsInstitution2Selected = 0;        }    }     $scope.ChangeSelectedOldSalary = function (IsOldSalary) { $scope.IsOldSalarySelected = IsOldSalary; }    $scope.ChangeSelectedNewSalary = function (IsNewSalary) { $scope.IsNewSalarySelected = IsNewSalary; }    $scope.ChangeSelectedConsolidatedRank = function (IsConsolidatedRank) { $scope.IsConsolidatedRankSelected = IsConsolidatedRank; }    $scope.ChangeSelectedInstitution1 = function (IsInstitution1) { $scope.IsInstitution1 = IsInstitution1Selected; }    $scope.ChangeSelectedInstitution2 = function (IsInstitution2) { $scope.IsInstitution2 = IsInstitution2Selected; }
    $scope.ProcessExternalExport = function () {        ngDialog.close();        srvcEmployeeDetails.ShowLoader('divWaitLoader', 'Please wait while Restore is being processed.')        $http({            url: '/Filter/ProcessExternalExport',            method: "POST",            params:            {                xPosition: $scope.selectedPosition,                xStatus: $scope.selectedStatus,                xIsmemo: $scope.IsMemoOnlySelected,                xPreProcType: $scope.selectedType            }        }).then(function (e) {            $timeout(function () {                srvcEmployeeDetails.CloseMessage();            }, 1000);            //alert('export ' + e.data);        }    )    };    // EXTERNAL EXPORT (PROC 12.1) END REGION
    // RESTORE ARCHIVE (NORLMAL) PROC09    $scope.restorearchiveTableList = [        { "value": 1, "display": 'ALL' },        { "value": 2, "display": 'HRMAADJ' },        { "value": 3, "display": 'EMPMEMOONLY' },        { "value": 4, "display": 'EMPBONUS' },        { "value": 5, "display": 'EMPOVERTIME' },        { "value": 6, "display": 'EMPLIST' },        { "value": 7, "display": 'BELLBOTH' },        { "value": 8, "display": 'BELLD2' },        { "value": 9, "display": 'BELLDETL' },        { "value": 10, "display": 'BELLPAR' },        { "value": 11, "display": 'BELLPOS' },        { "value": 12, "display": 'PROPERTIES' }    ];

    $scope.restorearchive = 0; $scope.Selectedrestorearchivevalue = 0; $scope.Selectedrestorearchivedisplay = 0;    $scope.selectTable = function (Selectedrestorearchive) {        $scope.Selectedrestorearchivevalue = Selectedrestorearchive.value;        $scope.Selectedrestorearchivedisplay = Selectedrestorearchive.display;        //alert($scope.Selectedrestorearchivedisplay);    }
    $scope.import = 0; $scope.SelectedImportvalue = 0; $scope.Selectedimportdisplay = 0;    $scope.selectTable = function (Selectedimport) {        $scope.SelectedImportvalue = Selectedimport.value;        $scope.Selectedimportdisplay = Selectedimport.display;        //alert($scope.Selectedimportdisplay);    }
    // use for the file upload    window.scope = $scope;    $scope.name = 'testvalue';    $scope.setFile = function (element) {        $scope.$apply(function () {            $scope.file = element.value;            $scope.RestoreArchiveNormalPath = element.value;            //$scope.file = element.files[0];            //$scope.file = (element.srcElement || element.target).files[0];            //console.log($scope.file);        });    };    // use for the file upload
    $scope.setImportFile = function (element) {        $scope.$apply(function () {            $scope.file = element.value;            $scope.ImportPath = element.value;        });    };    // use for the file upload
    $scope.ValidateRestoreArchiveNormalValues = function (isRestoreNormal) {        //var restorearchivenormalvalidOK = true;        if ($scope.RestoreArchiveNormalPath == ' ') { alert('Please select file to process.'); return; }        $scope.ProcessRestoreArchiveExcelFile(isRestoreNormal);        ngDialog.close();
        //if (restorearchivenormalvalidOK) {        //    $scope.ProcessRestoreArchiveExcelFile(isRestoreNormal);        //    ngDialog.close();        //}    };    $scope.ProcessRestoreArchiveExcelFile = function (isRestoreNormal) {        ngDialog.close();        srvcEmployeeDetails.ShowLoader('divWaitLoader', 'Please wait while Restore is being processed.')        $http({            url: '/Filter/ProcessRestoreArchive',            method: "POST",            params:            {                ArchiveFile: $scope.RestoreArchiveNormalPath,                RESTORETABLEVALUE: $scope.Selectedrestorearchivevalue,                RESTORETABLENAME: $scope.Selectedrestorearchivedisplay,                isRestoreNormal: isRestoreNormal            }        }).then(function (e) {            $timeout(function () {                srvcEmployeeDetails.CloseMessage();            }, 1000);            //alert('export ' + e.data);        }    )    };
    $scope.ValidateImportFile = function () {        if ($scope.RestoreArchiveNormalPath == ' ') { alert('Please select file to process.'); return; }        $scope.ProcessImport();        ngDialog.close();    };
    //$scope.TotalImportExcelRecords = 0;
    $scope.ProcessImport = function () {        ngDialog.close();        srvcEmployeeDetails.ShowLoader('divWaitLoader', 'Please wait while Import is being processed.')        $http({           url: '/Filter/ProcessImport',            method: "POST",            params:            {                ImportFile: $scope.ImportPath            }        }).then(function (e) {            //$timeout(function () {            //    srvcEmployeeDetails.CloseMessage();            //}, 1000);            //alert(e.data.TotalExcelRecords);            $scope.ImportProcessResultModel.ImportUserID = e.data.ImportUserID;            $scope.ImportProcessResultModel.TotalImportExcelRecords = e.data.TotalExcelRecords;            $scope.ImportProcessResultModel.TotalProcessed = e.data.TotalProcessed;            $scope.ImportProcessResultModel.Accepted = e.data.Accepted;            $scope.ImportProcessResultModel.Excluded = e.data.Excluded;            $scope.ImportProcessResultModel.Invalid = e.data.Invalid;            $scope.ImportProcessResultModel.TotalNotProcessed = e.data.TotalNotProcessed;
            srvcEmployeeDetails.ShowImportMessageResult("dvImportResult", "Import Process", "", $scope.ImportProcessResultModel);        }    )    };
        $scope.GenerateImportReport = function () {        ngDialog.close();        srvcEmployeeDetails.ShowLoader('divWaitLoader', 'Please wait while Import is being processed.')        $http({            url: '/Filter/GenerateImportReport',            method: "POST"        }).then(function (e) {            srvcEmployeeDetails.CloseMessage();            $timeout(function () {                srvcEmployeeDetails.CloseMessage();            }, 1000).then(function () {                $timeout(function () {                    srvcEmployeeDetails.ShowMessage("divPopupResult", "Import", 'Import completed.')                    multiDownload(e.data);                });            });        }    )    };
    // RESTORE ARCHIVE (NORLMAL) PROC09    $scope.ResetFilter = function () {        $scope.Rank = $scope.RankList[0];        $scope.RM = $scope.RMList[0];        $scope.Recom = $scope.RecomList[0];        $scope.Subsidiary = $scope.SubsidiaryList[0];        $scope.HM = $scope.HMList[0];        $scope.ResM = $scope.ResMList[0];        $scope.ZOG = $scope.ZOGList[0];        $scope.ZOB = $scope.ZOBList[0];        $scope.ZNG = $scope.ZNGList[0];        $scope.ZNB = $scope.ZNBList[0];        $scope.OS = $scope.OSList[0];        $scope.NS = $scope.NSList[0];        $scope.ZBA = $scope.ZBAList[0];        $scope.ZLA = $scope.ZLAList[0];        $scope.ZOA = $scope.ZOAList[0];        $scope.NBD = $scope.NBDList[0];        $scope.NLD = $scope.NLDList[0];        $scope.NOD = $scope.NODList[0];        $scope.CG = $scope.CGList[0];        $scope.INC = $scope.INCList[0];        $scope.ESL = $scope.ESLList[0];        $scope.other = $scope.otherList[0];        $scope.other2 = $scope.otherList2[0];        $scope.other3 = $scope.otherList3[0];        InitCombo();        $scope.RefreshEmpList();    };
    var InitCombo = function () {        $scope.Selectedother3 = 0;        $scope.Selectedother2 = 0;        $scope.Selectedother = 0;        $scope.SelectedESL = 0;        $scope.SelectedINC = 0;        $scope.SelectedCG = 0;        $scope.SelectedNOD = 0;        $scope.SelectedNLD = 0;        $scope.SelectedNBD = 0;        $scope.SelectedZOA = 0;        $scope.SelectedZLA = 0;        $scope.SelectedZBA = 0;        $scope.SelectedNS = 0;        $scope.SelectedOS = 0;        $scope.SelectedZNB = 0;        $scope.SelectedZNG = 0;        $scope.SelectedResM = 0;        $scope.SelectedHM = 0;        $scope.SelectedZOB = 0;        $scope.SelectedZOG = 0;        $scope.SelectedSubsidiary = 0;        $scope.SelectedRecom = 0;        $scope.SelectedRM = 0;        $scope.SelectedRank = 0;
        $scope.HF = "";        $scope.HTo = "";        $scope.RF = "";        $scope.RTo = "";
    };
    $scope.RefreshEmpList = function () {        /*         Define all the parameters for the USP_TBLEMPLOYEE_READ_v2 sp         (UserLevel varchar(6),ExportIncludeCurGross bit,ExportIncludeNewGross bit,         Other3 int(11),Other2 int(11),Other int(11),         ESL int(11), Inc int(11),CG int(11),NOD int(11),NLD int(11),         NBD int(11),ZOA int(11),ZLA int(11),ZBA int(11),NS int(11),         OS int(11),ZNB int(11),ZNG int(11),ResM int(11),HM int(11),         ZOB int(11),ZOG int(11),Subsidiary int(11),Recom int(11),         RM int(11),Rank int(11))        */        $http({            url: '/Filter/GetFilteredEmployeeList',            method: "POST",            params:            {                UserLevel: $scope.UserLevel,                IncludeCurGross: $scope.SelectedIncludeCurGross,                IncludeNewGross: $scope.IncludeNewGross,                other3: $scope.Selectedother3,                other2: $scope.Selectedother2,                other: $scope.Selectedother,                ESL: $scope.SelectedESL,                INC: $scope.SelectedINC,                CG: $scope.SelectedCG,                NOD: $scope.SelectedNOD,                NLD: $scope.SelectedNLD,                NBD: $scope.SelectedNBD,                ZOA: $scope.SelectedZOA,                ZLA: $scope.SelectedZLA,                ZBA: $scope.SelectedZBA,                NS: $scope.SelectedNS,                OS: $scope.SelectedOS,                ZNB: $scope.SelectedZNB,                ZNG: $scope.SelectedZNG,                ResM: $scope.SelectedResM,                HM: $scope.SelectedHM,                ZOB: $scope.SelectedZOB,                ZOG: $scope.SelectedZOG,                Subsidiary: $scope.SelectedSubsidiary,                Recom: $scope.SelectedRecom,                RM: $scope.SelectedRM,                Rank: $scope.SelectedRank,                HF: $scope.HF,                HT: $scope.HT,                RF: $scope.RF,                RT: $scope.RT            }        }).then(function (e) {            //alert('hi');            $rootScope.$broadcast('RefreshEmployeeList', e);        }    );    };
    $scope.GetCutOffDate = function (SelectedKey, paramtype) {        $http({            url: '/Filter/GetCutOffDate',            method: "POST",            params:            {                param1: SelectedKey,                paramtype: paramtype            }        }).then(function (e) {            if (SelectedKey == 7 | SelectedKey == 8 | SelectedKey == 9) {                if (paramtype == "H") { $scope.HF = e.data; }                else if (paramtype == "R") { $scope.RF = e.data; }            }            else if (SelectedKey == 10 | SelectedKey == 11 | SelectedKey == 12) {                if (paramtype == "H") {                    $scope.HTo = e.data;                }                else if (paramtype == "R") { $scope.RTo = e.data; }            }        }    );    };
    //   GET SELECTED OPTION
    $scope.GETHF = function (HFDate) {        $scope.HF = HFDate;        $scope.RefreshEmpList();    }
    $scope.GETRF = function (RFDate) {        $scope.RF = RFDatey;        $scope.RefreshEmpList();    }
    $scope.SelectRank = function (SelectedRank) { $scope.SelectedRank = SelectedRank.Key; $scope.RefreshEmpList(); }    $scope.SelectRM = function (SelectedRM) { $scope.SelectedRM = SelectedRM.Key; $scope.RefreshEmpList(); }    $scope.SelectRecom = function (SelectedRecom) { $scope.SelectedRecom = SelectedRecom.Key; $scope.RefreshEmpList(); }    $scope.SelectSubsidiary = function (SelectedSubsidiary) { $scope.SelectedSubsidiary = SelectedSubsidiary.Key; $scope.RefreshEmpList(); }
    $scope.SelectHM = function (SelectedHM, paramtype) {        $scope.SelectedHM = SelectedHM.Key;        $scope.GetCutOffDate(SelectedHM.Key, paramtype);        $scope.RefreshEmpList();    }
    $scope.SelectResM = function (SelectedResM, paramtype) {        $scope.SelectedResM = SelectedResM.Key        $scope.GetCutOffDate(SelectedResM.Key, paramtype);        $scope.RefreshEmpList();    }
    $scope.SelectZOG = function (SelectedZOG) { $scope.SelectedZOG = SelectedZOG.Key; $scope.RefreshEmpList(); }    $scope.SelectZOB = function (SelectedZOB) { $scope.SelectedZOB = SelectedZOB.Key; $scope.RefreshEmpList(); }    $scope.SelectZNG = function (SelectedZNG) {        $scope.SelectedZNG = SelectedZNG.Key;        $scope.RefreshEmpList();    }    $scope.SelectZNB = function (SelectedZNB) { $scope.SelectedZNB = SelectedZNB.Key; $scope.RefreshEmpList(); }    $scope.SelectOS = function (SelectedOS) { $scope.SelectedOS = SelectedOS.Key; $scope.RefreshEmpList(); }
    $scope.SelectNS = function (SelectedNS) {        $scope.SelectedNS = SelectedNS.Key;        $scope.RefreshEmpList();    }
    $scope.SelectZBA = function (SelectedZBA) {        $scope.SelectedZBA = SelectedZBA.Key;        $scope.RefreshEmpList();    }
    $scope.SelectZLA = function (SelectedZLA) {        $scope.SelectedZLA = SelectedZLA.Key;        $scope.RefreshEmpList();    }    $scope.SelectZOA = function (SelectedZOA) { $scope.SelectedZOA = SelectedZOA.Key; $scope.RefreshEmpList(); }    $scope.SelectNBD = function (SelectedNBD) { $scope.SelectedNBD = SelectedNBD.Key; $scope.RefreshEmpList(); }    $scope.SelectNLD = function (SelectedNLD) { $scope.SelectedNLD = SelectedNLD.Key; $scope.RefreshEmpList(); }    $scope.SelectNOD = function (SelectedNOD) { $scope.SelectedNOD = SelectedNOD.Key; $scope.RefreshEmpList(); }    $scope.SelectCG = function (SelectedCG) { $scope.SelectedCG = SelectedCG.Key; $scope.RefreshEmpList(); }    $scope.SelectINC = function (SelectedINC) { $scope.SelectedINC = SelectedINC.Key; $scope.RefreshEmpList(); }    $scope.SelectESL = function (SelectedESL) { $scope.SelectedESL = SelectedESL.Key; $scope.RefreshEmpList(); }    $scope.SelectOther = function (Selectedother) { $scope.Selectedother = Selectedother.Key; $scope.RefreshEmpList(); }    $scope.SelectOther2 = function (Selectedother2) {        $scope.Selectedother2 = Selectedother2.Key;        $scope.RefreshEmpList();    }    $scope.SelectOther3 = function (Selectedother3) { $scope.Selectedother3 = Selectedother3.Key; $scope.RefreshEmpList(); }
    $scope.SelectCurrGross = function (IncludeCurGross) {        $scope.SelectedIncludeCurGross = IncludeCurGross;        $scope.RefreshEmpList();    };    $scope.SelectNewGross = function (IncludeNewGross) {        $scope.SelectedIncludeNewGross = IncludeNewGross;        $scope.RefreshEmpList();    };    //   GET SELECTED OPTION
    //   INITIALIZE DROPDOWNLIST     ////rank list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 1 } })    .then(function (response) {        $scope.RankList = response.data;        $scope.Rank = $scope.RankList[0];    });
    ////RM *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 2 } })    .then(function (response) {        $scope.RMList = response.data;        $scope.RM = $scope.RMList[0];    });
    ////recommendation list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 3 } })    .then(function (response) {        $scope.RecomList = response.data;        $scope.Recom = $scope.RecomList[0];    });
    ////subsidiary list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 4 } })    .then(function (response) {        $scope.SubsidiaryList = response.data;        $scope.Subsidiary = $scope.SubsidiaryList[0];    });
    //hired list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 5 } })    .then(function (response) {        $scope.HMList = response.data;        $scope.HM = $scope.HMList[0];    });
    //resigned list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 5 } })    .then(function (response) {        $scope.ResMList = response.data;        $scope.ResM = $scope.ResMList[0];    });
    ////zero old gross list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 6 } })    .then(function (response) {        $scope.ZOGList = response.data;        $scope.ZOG = $scope.ZOGList[0];    });
    ////zero old basic list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 8 } })    .then(function (response) {        $scope.ZOBList = response.data;        $scope.ZOB = $scope.ZOBList[0];    });
    ////zero new gross list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 7 } })    .then(function (response) {        $scope.ZNGList = response.data;        $scope.ZNG = $scope.ZNGList[0];    });
    ////zero new basic list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 9 } })    .then(function (response) {        $scope.ZNBList = response.data;        $scope.ZNB = $scope.ZNBList[0];    });
    ////old salary list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 10 } })    .then(function (response) {        $scope.OSList = response.data;        $scope.OS = $scope.OSList[0];    });
    ////new salary list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 10 } })    .then(function (response) {        $scope.NSList = response.data;        $scope.NS = $scope.NSList[0];    });
    ////zero bonus amount list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 11 } })    .then(function (response) {        $scope.ZBAList = response.data;        $scope.ZBA = $scope.ZBAList[0];    });
    ////zero leaves amount list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 13 } })        .then(function (response) {            $scope.ZLAList = response.data;            $scope.ZLA = $scope.ZLAList[0];        });
    ////zero overtime  amount list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 15 } })        .then(function (response) {            $scope.ZOAList = response.data;            $scope.ZOA = $scope.ZOAList[0];        });
    ////no bonus data list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 12 } })        .then(function (response) {            $scope.NBDList = response.data;            $scope.NBD = $scope.NBDList[0];        });
    ////no leave data list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 14 } })        .then(function (response) {            $scope.NLDList = response.data;            $scope.NLD = $scope.NLDList[0];        });
    ////no overtime data list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 16 } })        .then(function (response) {            $scope.NODList = response.data;            $scope.NOD = $scope.NODList[0];        });
    ////corporate gross list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 17 } })        .then(function (response) {            $scope.CGList = response.data;            $scope.CG = $scope.CGList[0];        });
    ////INC list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 18 } })        .then(function (response) {            $scope.INCList = response.data;            $scope.INC = $scope.INCList[0];        });
    ////emplouee status list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 19 } })        .then(function (response) {            $scope.ESLList = response.data;            $scope.ESL = $scope.ESLList[0];        });
    ////other list *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 20 } })        .then(function (response) {            $scope.otherList = response.data;            $scope.other = $scope.otherList[0];        });
    ////other list 2 *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 20 } })        .then(function (response) {            $scope.otherList2 = response.data;            $scope.other2 = $scope.otherList2[0];        });
    ////other list 3 *    $http.get('/Filter/InitFilterDropDownList', { params: { "FilterIdParam": 20 } })        .then(function (response) {            $scope.otherList3 = response.data;            $scope.other3 = $scope.otherList3[0];        });
    //   INITIALIZE DROPDOWNLIST 

    $scope.Archive = function () {        ngDialog.open({            template: 'dvArchive',            plain: false,            scope: $scope,            showClose: false,            backdrop: 'static',            closeByDocument: false,            //controller: 'cntrlEmployee',            //scope: $scope,            width: 440        });    };
    $scope.Export = function () {        ngDialog.open({            template: 'dvExport',            plain: false,            scope: $scope,            showClose: false,            backdrop: 'static',            closeByDocument: false,            //controller: 'cntrlEmployee',            //scope: $scope,            width: 425,        });    };
    $scope.GenerateArchive = function () {        ngDialog.close();        srvcEmployeeDetails.ShowLoader('divWaitLoader', 'Please wait while Archive is being processed.')        /*         Define all the parameters for the USP_TBLEMPLOYEE_READ_v2 sp         (UserLevel varchar(6),ExportIncludeCurGross bit,ExportIncludeNewGross bit,         Other3 int(11),Other2 int(11),Other int(11),         ESL int(11), Inc int(11),CG int(11),NOD int(11),NLD int(11),         NBD int(11),ZOA int(11),ZLA int(11),ZBA int(11),NS int(11),         OS int(11),ZNB int(11),ZNG int(11),ResM int(11),HM int(11),         ZOB int(11),ZOG int(11),Subsidiary int(11),Recom int(11),         RM int(11),Rank int(11))        */
        var Data = {            IncludeCurGross: $scope.SelectedIncludeCurGross,            IncludeNewGross: $scope.IncludeNewGross,            other3: $scope.Selectedother3,            other2: $scope.Selectedother2,            other: $scope.Selectedother,            ESL: $scope.SelectedESL,            INC: $scope.SelectedINC,            CG: $scope.SelectedCG,            NOD: $scope.SelectedNOD,            NLD: $scope.SelectedNLD,            NBD: $scope.SelectedNBD,            ZOA: $scope.SelectedZOA,            ZLA: $scope.SelectedZLA,            ZBA: $scope.SelectedZBA,            NS: $scope.SelectedNS,            OS: $scope.SelectedOS,            ZNB: $scope.SelectedZNB,            ZNG: $scope.SelectedZNG,            ResM: $scope.SelectedResM,            HM: $scope.SelectedHM,            ZOB: $scope.SelectedZOB,            ZOG: $scope.SelectedZOG,            Subsidiary: $scope.SelectedSubsidiary,            Recom: $scope.SelectedRecom,            RM: $scope.SelectedRM,            Rank: $scope.SelectedRank        };        $http({            url: '/Filter/ProcessArchive',            method: "POST",            data: $.param(Data),            headers: {                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'            }        }).then(function (e) {            $timeout(function () {                srvcEmployeeDetails.CloseMessage();            }, 1000);            FileDownload(e.data);        }    );    };
    function FileDownload(file) {
        window.location = '/Filter/DownloadFile?newFile=' + file;
        //var fileIndex = 0;        //var downloadInterval = setInterval(function () {
        //    var newFile = '';        //    if (fileIndex < files.length) {        //        newFile = '/home/DownloadFile?newFile=' + files[fileIndex];        //        fileIndex++;        //        var iframe = $("<iframe/>").attr({ id: 'iframe' + fileIndex, src: newFile, style: "visibility:hidden;display:none" }).appendTo("#dvEmpListing");        //    }        //    else {        //        clearInterval(downloadInterval);        //        $('#dvEmpListing > iframe').remove();        //    }        //}, 1000)
    }
    function FileDownloadMultiple(file) {
        var fileIndex = 0;        var downloadInterval = setInterval(function () {
            var newFile = '';            if (fileIndex < files.length) {                newFile = '/Filter/DownloadFile?newFile=' + files[fileIndex];                fileIndex++;                var iframe = $("<iframe/>").attr({ id: 'iframe' + fileIndex, src: newFile, style: "visibility:hidden;display:none" }).appendTo("#dvEmpListing");            }            else {                clearInterval(downloadInterval);                $('#dvEmpListing > iframe').remove();            }        }, 1000)
    }

    $scope.GenerateExport = function () {        ngDialog.close();        srvcEmployeeDetails.ShowLoader('divWaitLoader', 'Please wait while Export is being processed.')        /*         Define all the parameters for the USP_TBLEMPLOYEE_READ_v2 sp         (UserLevel varchar(6),ExportIncludeCurGross bit,ExportIncludeNewGross bit,         Other3 int(11),Other2 int(11),Other int(11),         ESL int(11), Inc int(11),CG int(11),NOD int(11),NLD int(11),         NBD int(11),ZOA int(11),ZLA int(11),ZBA int(11),NS int(11),         OS int(11),ZNB int(11),ZNG int(11),ResM int(11),HM int(11),         ZOB int(11),ZOG int(11),Subsidiary int(11),Recom int(11),         RM int(11),Rank int(11))        */        $http({            //url: '/Filter/GetFilteredEmployeeList',            url: '/Filter/GenerateExportFile',            method: "POST",            params:            {                UserLevel: $scope.UserLevel,                IncludeCurGross: $scope.SelectedIncludeCurGross,                IncludeNewGross: $scope.IncludeNewGross,                other3: $scope.Selectedother3,                other2: $scope.Selectedother2,                other: $scope.Selectedother,                ESL: $scope.SelectedESL,                INC: $scope.SelectedINC,                CG: $scope.SelectedCG,                NOD: $scope.SelectedNOD,                NLD: $scope.SelectedNLD,                NBD: $scope.SelectedNBD,                ZOA: $scope.SelectedZOA,                ZLA: $scope.SelectedZLA,                ZBA: $scope.SelectedZBA,                NS: $scope.SelectedNS,                OS: $scope.SelectedOS,                ZNB: $scope.SelectedZNB,                ZNG: $scope.SelectedZNG,                ResM: $scope.SelectedResM,                HM: $scope.SelectedHM,                ZOB: $scope.SelectedZOB,                ZOG: $scope.SelectedZOG,                Subsidiary: $scope.SelectedSubsidiary,                Recom: $scope.SelectedRecom,                RM: $scope.SelectedRM,                Rank: $scope.SelectedRank,                HF: $scope.HF,                HT: $scope.HT,                RF: $scope.RF,                RT: $scope.RT            }        }).then(function (e) {            $timeout(function () {                srvcEmployeeDetails.CloseMessage();            }, 1000);            FileDownload(e.data);        }    );
    };

    $scope.GenerateExternalExport = function () {        ngDialog.close();        srvcEmployeeDetails.ShowLoader('divWaitLoader', 'Please wait while Export is being processed.')        /*         Define all the parameters for the USP_TBLEMPLOYEE_READ_v2 sp         (UserLevel varchar(6),ExportIncludeCurGross bit,ExportIncludeNewGross bit,         Other3 int(11),Other2 int(11),Other int(11),         ESL int(11), Inc int(11),CG int(11),NOD int(11),NLD int(11),         NBD int(11),ZOA int(11),ZLA int(11),ZBA int(11),NS int(11),         OS int(11),ZNB int(11),ZNG int(11),ResM int(11),HM int(11),         ZOB int(11),ZOG int(11),Subsidiary int(11),Recom int(11),         RM int(11),Rank int(11))        */        $http({            //url: '/Filter/GetFilteredEmployeeList',            url: '/Filter/GenerateExternalExportFile',            method: "POST",            params:            {                UserLevel: $scope.UserLevel,                IncludeCurGross: $scope.SelectedIncludeCurGross,                IncludeNewGross: $scope.IncludeNewGross,                other3: $scope.Selectedother3,                other2: $scope.Selectedother2,                other: $scope.Selectedother,                ESL: $scope.SelectedESL,                INC: $scope.SelectedINC,                CG: $scope.SelectedCG,                NOD: $scope.SelectedNOD,                NLD: $scope.SelectedNLD,                NBD: $scope.SelectedNBD,                ZOA: $scope.SelectedZOA,                ZLA: $scope.SelectedZLA,                ZBA: $scope.SelectedZBA,                NS: $scope.SelectedNS,                OS: $scope.SelectedOS,                ZNB: $scope.SelectedZNB,                ZNG: $scope.SelectedZNG,                ResM: $scope.SelectedResM,                HM: $scope.SelectedHM,                ZOB: $scope.SelectedZOB,                ZOG: $scope.SelectedZOG,                Subsidiary: $scope.SelectedSubsidiary,                Recom: $scope.SelectedRecom,                RM: $scope.SelectedRM,                Rank: $scope.SelectedRank,                HF: $scope.HF,                HT: $scope.HT,                RF: $scope.RF,                RT: $scope.RT            }        }).then(function (e) {            $timeout(function () {                srvcEmployeeDetails.CloseMessage();            }, 1000);            FileDownload(e.data);        }    );
    };})///* FILTER ENDS HERE */-- end of Fitler

